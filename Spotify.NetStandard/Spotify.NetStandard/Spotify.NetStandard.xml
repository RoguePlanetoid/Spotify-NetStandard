<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spotify.NetStandard</name>
    </assembly>
    <members>
        <member name="T:Spotify.NetStandard.Client.Authentication.AccessToken">
            <summary>
            Access Token Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.AccessToken.Token">
            <summary>
            Access Token
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.AccessToken.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.AccessToken.Expiration">
            <summary>
            Token Expiration Date
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.AccessToken.TokenType">
            <summary>
            Token Type
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.AccessToken.Scopes">
            <summary>
            Scopes
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Authentication.Enums.TokenType">
            <summary>
            Authentication Token Type
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Client.Authentication.Enums.TokenType.Access">
            <summary>
            Access Token
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Client.Authentication.Enums.TokenType.User">
            <summary>
            User Token
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Authentication.Internal.AccessCode">
            <summary>
            Access Code
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AccessCode.Code">
            <summary>
            An authorization code that can be exchanged for an access token.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AccessCode.State">
            <summary>
            The value of the state parameter supplied in the request.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AccessCode.Error">
            <summary>
            The reason authorization failed, for example: “access_denied”
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AccessCode.ResponseUri">
            <summary>
            An authorization Uri
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AccessCode.RedirectUri">
            <summary>
            Redirect Uri
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AccessCode.#ctor(System.Uri,System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="responseUri">An authorization Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="dictionary">QueryString Dictionary</param>
        </member>
        <member name="T:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache">
            <summary>
            Authentication Cache
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.Map(Spotify.NetStandard.Client.Authentication.Enums.TokenType,Spotify.NetStandard.Client.Authentication.Internal.AuthenticationResponse)">
            <summary>
            Map
            </summary>
            <param name="tokenType">TokenType</param>
            <param name="response">AuthenticationResponse</param>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.Map(Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant)">
            <summary>
            Map
            </summary>
            <param name="response">ImplicitGrant</param>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.#ctor(Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="client">Authentication Client</param>
            <param name="clientId">Client Id</param>
            <param name="clientSecret">Client Secret</param>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.CheckAndRenewTokenAsync(Spotify.NetStandard.Client.Authentication.Enums.TokenType,System.Threading.CancellationToken)">
            <summary>
            Check And Renew Token - Client Credentials Flow
            </summary>
            <param name="tokenType">Token Type</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Access Token</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException">AuthAccessTokenRequiredException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException">AuthUserTokenRequiredException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.GetRefreshTokenAsync(System.String,Spotify.NetStandard.Client.Authentication.Enums.TokenType,System.Threading.CancellationToken)">
            <summary>
            Get Refresh Token - Client Credentials Flow
            </summary>
            <param name="refreshToken">Refresh Token</param>
            <param name="tokenType">Token Type</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.GetClientCredentialsTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Get Client Credentials Token - Client Credentials Flow
            </summary>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.GetAuthorisationCodeTokenAsync(Spotify.NetStandard.Client.Authentication.Internal.AccessCode,System.Threading.CancellationToken)">
            <summary>
            Get Authorisation Code Token - Authorisation Code Flow
            </summary>
            <param name="accessCode">Access Code</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.GetAccessCodeAuth(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Get Access Code Auth - Authorisation Code Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scopes">Scope</param>
            <returns>Authentication Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.GetAccessCodeAuthAsync(System.Uri,System.Uri,System.String)">
            <summary>
            Get Access Code Auth - Authorisation Code Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State Value</param>
            <returns>Access Token</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.GetImplicitGrantAuth(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Get Implicit Grant Auth - Implicit Grant Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scopes">Scope</param>
            <returns>Authentication Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.GetImplicitGrantAuth(System.Uri,System.Uri,System.String)">
            <summary>
            Get Implicit Grant Auth - Implicit Grant Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State Value</param>
            <returns>Access Token</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenValueException">AuthTokenValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenStateException">AuthTokenStateException</exception>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache.AccessToken">
            <summary>
            Access Token
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient">
            <summary>
            Authentication Client
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient.GetHeaders(System.String,System.String)">
            <summary>
            Get Headers
            </summary>
            <param name="clientId">Client Id</param>
            <param name="clientSecret">Client Secret</param>
            <returns>Dictionary Of String, String</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient.ClientCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Client Credentials - Client Credentials Flow
            </summary>
            <param name="clientId">Client Id</param>
            <param name="clientSecret">Client Secret</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Authentication Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient.AuthorisationCodeAsync(System.String,System.String,Spotify.NetStandard.Client.Authentication.Internal.AccessCode,System.Threading.CancellationToken)">
            <summary>
            Authorisation Code - Authorisation Code Flow
            </summary>
            <param name="clientId">Client Id</param>
            <param name="clientSecret">Client Secret</param>
            <param name="accessCode">Access Code</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Authentication Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient.RefreshTokenAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Refresh Token - Authorization Code Flow
            </summary>
            <param name="clientId">Client Id</param>
            <param name="clientSecret">Client Secret</param>
            <param name="refreshToken">Refresh Token</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Authentication Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient.GetAccessCodeRequest(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Access Code Request - Authorization Code Flow
            </summary>
            <param name="clientId">Client Id</param>
            <param name="scopes">Comma delimited scopes</param>
            <param name="state">State</param>
            <param name="redirectUrl">Redirect Url</param>
            <param name="showDialog">Show Dialog</param>
            <returns>Url</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationClient.GetImplicitGrantRequest(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Implicit Grant Request - Implicit Grant Flow
            </summary>
            <param name="clientId">Client Id</param>
            <param name="scopes">Comma delimited scopes</param>
            <param name="state">State</param>
            <param name="redirectUrl">Redirect Url</param>
            <param name="showDialog">Show Dialog</param>
            <returns>Url</returns>
        </member>
        <member name="T:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationResponse">
            <summary>
            Authentication Response
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationResponse.AccessToken">
            <summary>
            An access token that can be provided in subsequent calls
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationResponse.TokenType">
            <summary>
            How the access token may be used: always “Bearer”.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationResponse.Scope">
            <summary>
            A space-separated list of scopes which have been granted for this access token
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationResponse.ExpiresIn">
            <summary>
            The time period (in seconds) for which the access token is valid.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.AuthenticationResponse.RefreshToken">
            <summary>
            A token that can be sent to the Spotify Accounts service in place of an authorization code
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant">
            <summary>
            Implicit Grant
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.AccessToken">
            <summary>
            An access token that can be provided in subsequent calls, for example to Spotify Web API services.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.TokenType">
            <summary>
            Value: “Bearer”
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.ExpiresIn">
            <summary>
            The time period (in seconds) for which the access token is valid.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.State">
            <summary>
            The value of the state parameter supplied in the request.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.Error">
            <summary>
            The reason authorization failed, for example: “access_denied”
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.ResponseUri">
            <summary>
            An authorization Uri
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.RedirectUri">
            <summary>
            Redirect Uri
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Authentication.Internal.ImplicitGrant.#ctor(System.Uri,System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="responseUri">An authorization Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="dictionary">QueryString Dictionary</param>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthCodeStateException">
            <summary>
            Auth Code State Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthCodeValueException">
            <summary>
            Auth Code Value Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthException">
            <summary>
            Auth Code Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthTokenRequiredException">
            <summary>
            Auth Token Expired or Required Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException">
            <summary>
            Auth User Token Expired or Required Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException">
            <summary>
            Auth Access Token Expired or Required Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthTokenStateException">
            <summary>
            Auth Token State Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Exceptions.AuthTokenValueException">
            <summary>
            Auth Token Value Error
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Client.Interfaces.ISpotifyApi">
            <summary>
            Spotify API
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetAuthorisationCodeAuthUri(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Get Authorisation Code Auth Uri - Authorisation Code Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetAuthorisationCodeAuthTokenAsync(System.Uri,System.Uri,System.String)">
            <summary>
            Get Authorisation Code Auth Token - Authorisation Code Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetClientCredentialsAuthTokenAsync">
            <summary>
            Get Client Credentials Auth Token - Client Credentials Flow
            </summary>
            <returns>AccessToken on Success, Null if Not</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetImplicitGrantAuthUri(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Get Implicit Grant Auth Uri - Implicit Grant Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetImplicitGrantAuthToken(System.Uri,System.Uri,System.String)">
            <summary>
            Get Implicit Grant Auth Token - Implicit Grant Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.SearchForItemAsync(System.String,Spotify.NetStandard.Requests.SearchType,System.String,System.Nullable{System.Boolean},Spotify.NetStandard.Requests.Page)">
            <summary>
            Search for an Item
            </summary>
            <param name="query">(Required) Search query keywords and optional field filters and operators.</param>
            <param name="searchType">(Required) List of item types to search across.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token.</param>
            <param name="external">(Optional) Include any relevant audio content that is hosted externally. </param>
            <param name="page">(Optional) Limit: Maximum number of results to return. Default: 20 Minimum: 1 Maximum: 50 - Offset: The index of the first track to return</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetAllCategoriesAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get All Categories
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore.</param>
            <param name="page">(Optional) Limit: The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50. Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Category Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetCategoryAsync(System.String,System.String,System.String)">
            <summary>
            Get a Category
            </summary>
            <param name="categoryId">(Required) The Spotify category ID for the category.</param>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore.</param>
            <returns>Category Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetCategoryPlaylistsAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get a Category's Playlists
            </summary>
            <param name="categoryId">(Required) The Spotify category ID for the category.</param>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetRecommendationsAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.String,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack)">
            <summary>
            Get Recommendations
            </summary>
            <param name="seedArtists">(Required) List of Spotify IDs for seed artists. Up to 5 seed values may be provided in any combination of seedArtists, seedTracks and seedGenres.</param>
            <param name="seedGenres">(Required) List of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of seedArtists, seedTracks and seedGenres.</param>
            <param name="seedTracks">(Required) List of Spotify IDs for a seed track. Up to 5 seed values may be provided in any combination of seedArtists, seedTracks and seedGenres.</param>
            <param name="limit">(Optional) The target size of the list of recommended tracks. Default: 20. Minimum: 1. Maximum: 100.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="minTuneableTrack">(Optional) Multiple values. For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided</param>
            <param name="maxTuneableTrack">(Optional) Multiple values. For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided.</param>
            <param name="targetTuneableTrack">(Optional) Multiple values. For each of the tunable track attributes (below) a target value may be provided.</param>
            <returns>Recommendation Response Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetRecommendationGenresAsync">
            <summary>
            Get Recommendation Genres
            </summary>
            <returns>Available Genre Seeds Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetAllNewReleasesAsync(System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get All New Releases
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetAllFeaturedPlaylistsAsync(System.String,System.String,System.Nullable{System.DateTime},Spotify.NetStandard.Requests.Page)">
            <summary>
            Get All Featured Playlists
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country</param>
            <param name="locale">(Optional) The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore</param>
            <param name="timeStamp">(Optional) Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day.</param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetFollowingStateForArtistsOrUsersAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Get Following State for Artists/Users
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="ids">(Required) List of the artist or the user Spotify IDs to check.</param>
            <param name="followType">(Required) Either artist or user.</param>
            <returns>List of true or false values</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.CheckUsersFollowingPlaylistAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Check if Users Follow a Playlist
            <para>Scopes: PlaylistReadPrivate</para>
            </summary>
            <param name="ids">(Required) List of Spotify User IDs, the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.</param>
            <param name="playlistId">(Required) The Spotify ID of the playlist.</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.FollowArtistsOrUsersAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Follow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="ids">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.FollowPlaylistAsync(System.String,System.Boolean)">
            <summary>
            Follow a Playlist
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist. Any playlist can be followed, regardless of its public/private status, as long as you know its playlist ID.</param>
            <param name="isPublic">(Optional) Defaults to true. If true the playlist will be included in user’s public playlists, if false it will remain private. To be able to follow playlists privately, the user must have granted the playlist-modify-private scope.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUsersFollowedArtistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Followed Artists
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: The last artist ID retrieved from the previous request.</param>
            <returns>CursorPaging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UnfollowArtistsOrUsersAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Unfollow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="ids">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UnfollowPlaylistAsync(System.String)">
            <summary>
            Unfollow Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist that is to be no longer followed.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.AddTracksToPlaylistAsync(System.String,System.Collections.Generic.List{System.String},System.Nullable{System.Int32})">
            <summary>
            Add Tracks to a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) List of Spotify track URIs to add.</param>
            <param name="position">(Optional) The position to insert the tracks, a zero-based index.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetPlaylistAsync(System.String)">
            <summary>
            Get a Playlist
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <returns>Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.RemoveTracksFromPlaylistAsync(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Remove Tracks from a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="tracks">(Required) List of Spotify URIs of the tracks to remove</param>
            <param name="snapshotId">(Optional) The playlist’s snapshot ID against which you want to make the changes. The API will validate that the specified tracks exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetPlaylistTracksAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get a Playlist's Tracks
            </summary>
            <param name="id">(Required) The Spotify ID for the playlist.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetPlaylistCoverImageAsync(System.String)">
            <summary>
            Get a Playlist Cover Image
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <returns>List of Image Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UploadCustomPlaylistCoverImageAsync(System.String,System.Byte[])">
            <summary>
            Upload a Custom Playlist Cover Image
            <para>Scopes: UserGeneratedContentImageUpload, PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="file">(Required) JPEG Image File Bytes</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserPlaylistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of Current User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100. Use with limit to get the next set of playlists.</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.ChangePlaylistDetailsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Change a Playlist's Details
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="name">(Optional) The new name for the playlist, for example "My New Playlist Title"</param>
            <param name="isPublic">(Optional) If true the playlist will be public, if false it will be private.</param>
            <param name="isCollaborative">(Optional) If true , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. Note: You can only set collaborative to true on non-public playlists.</param>
            <param name="description">(Optional) Value for playlist description as displayed in Spotify Clients and in the Web API.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserPlaylistsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of a User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.ReplacePlaylistTracksAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Replace a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) List of Spotify track URIs.</param>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.CreatePlaylistAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Create a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="name">(Required) The name for the new playlist, for example "Your Coolest Playlist" . This name does not need to be unique; a user may have several playlists with the same name.</param>
            <param name="isPublic">(Optional) Defaults to true . If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope</param>
            <param name="isCollaborative">(Optional) Defaults to false . If true the playlist will be collaborative. Note that to create a collaborative playlist you must also set public to false . To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.</param>
            <param name="description">(Optional) Value for playlist description as displayed in Spotify Clients and in the Web API.</param>
            <returns>Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.ReorderPlaylistTracksAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Reorder a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">The Spotify ID for the playlist.</param>
            <param name="rangeStart">(Required) The position of the first track to be reordered.</param>
            <param name="insertBefore">(Required) The position where the tracks should be inserted. To reorder the tracks to the end of the playlist, simply set insert_before to the position after the last track.</param>
            <param name="rangeLength">(Optional) The amount of tracks to be reordered. Defaults to 1 if not set. The range of tracks to be reordered begins from the range_start position, and includes the range_length subsequent tracks.</param>
            <param name="snapshotId">(Optional) The playlist’s snapshot ID against which you want to make the changes.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.CheckUserSavedAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.SaveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Tracks for User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.RemoveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.SaveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.RemoveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove User's Saved Tracks
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserSavedAlbumsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserSavedTracksAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.CheckUserSavedTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetMultipleArtistsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Get Multiple Artists
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the artists. Maximum: 50 IDs.</param>
            <returns>List of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetArtistAsync(System.String)">
            <summary>
            Get an Artist
            </summary>
            <param name="id">(Required) The Spotify ID of the artist.</param>
            <returns>Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetArtistAlbumsAsync(System.String,Spotify.NetStandard.Requests.IncludeGroup,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get an Artist's Albums
            </summary>
            <param name="id">(Required) The Spotify ID for the artist.</param>
            <param name="includeGroup">(Optional) Filters the response. If not supplied, all album types will be returned</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="page">(Optional) Limit: The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first album to return. Default: 0</param>
            <returns>Paging List of Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetArtistTopTracksAsync(System.String,System.String)">
            <summary>
            Get an Artist's Top Tracks
            </summary>
            <param name="id">(Required) The Spotify ID for the artist.</param>
            <param name="market">(Required) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <returns>List of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetArtistRelatedArtistsAsync(System.String)">
            <summary>
            Get an Artist's Related Artists
            </summary>
            <param name="id">(Requird) The Spotify ID for the artist.</param>
            <returns>List of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackNextTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Next Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackSeekTrackAsync(System.Int32,System.String)">
            <summary>
            Seek To Position In Currently Playing Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="position">(Required) The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserPlaybackDevicesAsync">
            <summary>
            Get a User's Available Devices
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <returns>Devices Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackToggleShuffleAsync(System.Boolean,System.String)">
            <summary>
            Toggle Shuffle For User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) true : Shuffle user’s playback, false : Do not shuffle user’s playback</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackTransferAsync(System.Collections.Generic.List{System.String},System.Nullable{System.Boolean})">
            <summary>
            Transfer a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceIds">(Required) List containing the ID of the device on which playback should be started/transferred. Although an array is accepted, only a single device_id is currently supported.</param>
            <param name="play">(Optional) true: ensure playback happens on new device. false or not provided: keep the current playback state.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserRecentlyPlayedTracksAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get Current User's Recently Played Tracks
            <para>Scopes: ListeningRecentlyPlayed</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: A Unix timestamp in milliseconds. Returns all items after (but not including) this cursor position. If after is specified, before must not be specified. Before - (Optional) A Unix timestamp in milliseconds. Returns all items before (but not including) this cursor position. If before is specified, after must not be specified.</param>
            <returns>Cursor Paging of Play History Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackStartResumeAsync(System.String,System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Start/Resume a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="contextUri">(Optional) Spotify URI of the context to play. Valid contexts are albums, artists, playlists. Example: "spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"</param>
            <param name="uris">(Optional) List of the Spotify track URIs to play. For example: ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}</param>
            <param name="offsetUri">(Optional) Use either offsetUri or offsetPosition, Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object, or when the uris parameter is used. “position” is zero based and can’t be negative. Example: 5.</param>
            <param name="offsetPosition">(Optional) Use either offsetPosition or offsetUri, Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object, or when the uris parameter is used. “uri” is a string representing the uri of the item to start at. Example: "spotify:track:1301WleyT98MSxVHPZCA6M"</param>
            <param name="position">(Optional) Indicates from what position to start playback.Must be a positive number.Passing in a position that is greater than the length of the track will cause the player to start playing the next song.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackSetRepeatModeAsync(Spotify.NetStandard.Enums.RepeatState,System.String)">
            <summary>
            Set Repeat Mode On User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackPauseAsync(System.String)">
            <summary>
            Pause a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackPreviousTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Previous Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserPlaybackCurrentAsync(System.String)">
            <summary>
            Get Information About The User's Current Playback
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserPlaybackCurrentTrackAsync(System.String)">
            <summary>
            Get the User's Currently Playing Track
            <para>Scopes: ConnectReadCurrentlyPlaying, ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Simplified Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.UserPlaybackSetVolumeAsync(System.Int32,System.String)">
            <summary>
            Set Volume For User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="percent">(Required) The volume to set. Must be a value from 0 to 100 inclusive.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserTopArtistsAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Artists
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserTopTracksAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Tracks
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserProfileAsync(System.String)">
            <summary>
            Get a User's Profile
            </summary>
            <param name="userId">The user’s Spotify user ID.</param>
            <returns>Public User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetUserProfileAsync">
            <summary>
            Get Current User's Profile
            <para>Scopes: UserReadEmail, UserReadBirthDate, UserReadPrivate</para>
            </summary>
            <returns>Private User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetMultipleAlbumsAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get Multiple Albums
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the albums. Maximum: 20 IDs.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>List of Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetAlbumAsync(System.String,System.String)">
            <summary>
            Get an Album
            </summary>
            <param name="id">(Required) The Spotify ID of the album.</param>
            <param name="market">(Optional) The market you’d like to request. An ISO 3166-1 alpha-2 country code.</param>
            <returns>Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetAlbumTracksAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get an Album's Tracks
            </summary>
            <param name="id">(Required) The Spotify ID of the album.</param>      
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="page">(Optional) Limit: The maximum number of tracks to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first track to return</param>
            <returns>Paging of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetTrackAudioFeaturesAsync(System.String)">
            <summary>
            Get Audio Features for a Track
            </summary>
            <param name="id">(Required) The Spotify ID for the track</param>
            <returns>Audio Features Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetTrackAsync(System.String,System.String)">
            <summary>
            Get a Track
            </summary>
            <param name="id">(Required) The Spotify ID for the track.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetTrackAudioAnalysisAsync(System.String)">
            <summary>
            Get Audio Analysis for a Track
            </summary>
            <param name="id">(Required) The Spotify ID for the track</param>
            <returns>Audio Analysis Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetSeveralTracksAudioFeaturesAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Get Audio Features for Several Tracks
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the tracks. Maximum: 100 IDs.</param>
            <returns>List of Audio Features Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyApi.GetSeveralTracksAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get Several Tracks
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the tracks. Maximum: 50 IDs.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>List of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="T:Spotify.NetStandard.Client.Interfaces.ISpotifyClient">
            <summary>
            Spotify Client
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.Api">
            <summary>
            Spotify API
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.GetToken">
            <summary>
            Get Access Token
            </summary>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.SetToken(Spotify.NetStandard.Client.Authentication.AccessToken)">
            <summary>
            Set Access Token
            </summary>
            <param name="value">Access Token</param>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.RefreshToken">
            <summary>
            Refresh Token
            </summary>
            <param name="type">Token Type</param>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.GetAsync``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="hostname">Hostname</param>
            <param name="endpoint">Endpoint</param>
            <param name="parameters">Parameters</param>
            <returns>Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.GetAsync``1(System.Uri)">
            <summary>
            Get
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="source">Source Uri</param>
            <returns>Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.NavigateAsync``1(Spotify.NetStandard.Responses.Paging{``0},Spotify.NetStandard.Enums.NavigateType)">
            <summary>
            Navigate 
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="paging">Paging Object</param>
            <param name="navigateType">Navigate Type</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.SearchAsync(System.String,Spotify.NetStandard.Requests.SearchType,System.String,System.Nullable{System.Boolean},Spotify.NetStandard.Requests.Page)">
            <summary>
            Search
            </summary>
            <param name="query">(Required) Search Query</param>
            <param name="searchType">(Required) Search results include hits from all the specified item types.</param>
            <param name="country">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="external">(Optional) Include any relevant audio content that is hosted externally. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return - Offset: The index of the first item to return</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupAsync``1(System.String,Spotify.NetStandard.Enums.LookupType,System.String,System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="itemId">(Required) The Spotify ID for the album.</param>
            <param name="lookupType">(Required) Item Type</param>
            <param name="market">(Optional) ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="key">(Optional) Query Parameter Key</param>
            <param name="value">(Optional) Query Parameter Value</param>
            <param name="page">(Optional) Limit: The maximum number of items to return - Offset: The index of the first item to return</param>
            <returns>Lookup Response by Type</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.LookupType,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup
            </summary>
            <param name="itemIds">(Required) List of Spotify ID for the items</param>
            <param name="lookupType">(Required) Lookup Item Type</param>
            <param name="market">(Optional) ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="page">(Optional) Limit: The maximum number of items to return - Offset: The index of the first item to return</param>
            <returns>Lookup Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupFeaturedPlaylistsAsync(System.String,System.String,System.Nullable{System.DateTime},Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup Featured Playlists
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore</param>
            <param name="timestamp">(Optional) Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day.</param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupNewReleasesAsync(System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup New Releases
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupArtistAlbumsAsync(System.String,Spotify.NetStandard.Requests.IncludeGroup,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup Artist's Albums
            </summary>
            <param name="itemId">(Required) The Spotify ID for the artist.</param>
            <param name="includeGroup">(Optional) Filters the response. If not supplied, all album types will be returned</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code</param>
            <param name="page">(Optional) Limit: The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50 - Offset: The index of the first album to return. Default: 0 (i.e., the first album).</param>
            <returns>Paging List of Album</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupArtistTopTracksAsync(System.String,System.String)">
            <summary>
            Lookup Artist's Top Tracks
            </summary>
            <param name="itemId">(Required) The Spotify ID for the artist.</param>
            <param name="market">(Required) A country: an ISO 3166-1 alpha-2 country code or the string from_token</param>
            <returns>Lookup Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupArtistRelatedArtistsAsync(System.String)">
            <summary>
            Lookup Artist's Related Artists
            </summary>
            <param name="itemId">(Required) The Spotify ID for the artist.</param>
            <returns>Lookup Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupAllCategoriesAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup All Categories
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore</param>
            <param name="page">(Optional) Limit: The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupCategoryAsync(System.String,System.String,System.String)">
            <summary>
            Lookup Category 
            </summary>
            <param name="categoryId">The Spotify category ID for the category.</param>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore.</param>
            <returns>Category Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupRecommendationsAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.String,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack)">
            <summary>
            Lookup Recommendations
            </summary>
            <param name="seedArtists">List of Spotify IDs for seed artists</param>
            <param name="seedGenres">List of any genres in the set of available genre seeds</param>
            <param name="seedTracks">List of Spotify IDs for a seed track</param>
            <param name="limit">The target size of the list of recommended tracks. Default: 20. Minimum: 1. Maximum: 100.</param>
            <param name="market">An ISO 3166-1 alpha-2 country code</param>
            <param name="minTuneableTrack">Multiple values. For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided</param>
            <param name="maxTuneableTrack">Multiple values. For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided.</param>
            <param name="targetTuneableTrack">Multiple values. For each of the tunable track attributes a target value may be provided.</param>
            <returns>Recommendation Response Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.LookupRecommendationGenres">
            <summary>
            Lookup Recommendation Genres
            </summary>
            <returns>Available Genre Seeds Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUser(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Auth User - Authorisation Code Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserAsync(System.Uri,System.Uri,System.String)">
            <summary>
            Auth User - Authorisation Code Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthAsync">
            <summary>
            Auth - Client Credentials Flow
            </summary>
            <returns>AccessToken on Success, Null if Not</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserImplicit(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Auth User Implicit - Implicit Grant Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserImplicit(System.Uri,System.Uri,System.String)">
            <summary>
            Auth User Implicit - Implicit Grant Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupFollowingStateAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Get Following State for Artists/Users
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="itemIds">(Required) List of the artist or the user Spotify IDs to check.</param>
            <param name="followType">(Required) Either artist or user.</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserFollowingPlaylistAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Check if Users Follow a Playlist
            <para>Scopes: PlaylistReadPrivate</para>
            </summary>
            <param name="itemIds">(Required) List of Spotify User IDs, the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.</param>
            <param name="playlistId">(Required) The Spotify ID of the playlist.</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthFollowAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Follow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="itemIds">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthFollowPlaylistAsync(System.String,System.Boolean)">
            <summary>
            Follow a Playlist
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist. Any playlist can be followed, regardless of its public/private status, as long as you know its playlist ID.</param>
            <param name="isPublic">(Optional) Defaults to true. If true the playlist will be included in user’s public playlists, if false it will remain private. To be able to follow playlists privately, the user must have granted the playlist-modify-private scope.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupFollowedArtistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Followed Artists
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: The last artist ID retrieved from the previous request.</param>
            <returns>CursorPaging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUnfollowAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Unfollow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="itemIds">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUnfollowPlaylistAsync(System.String)">
            <summary>
            Unfollow Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist that is to be no longer followed.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthAddTracksToPlaylistAsync(System.String,Spotify.NetStandard.Requests.UriListRequest,System.Nullable{System.Int32})">
            <summary>
            Add Tracks to a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) List of Spotify track URIs to add.</param>
            <param name="position">(Optional) The position to insert the tracks, a zero-based index.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthRemoveTracksFromPlaylistAsync(System.String,Spotify.NetStandard.Requests.PlaylistTracksRequest)">
            <summary>
            Remove Tracks from a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="request">(Optional) Tracks: An array of objects containing Spotify URIs of the tracks to remove. Snapshot ID : The playlist’s snapshot ID against which you want to make the changes. The API will validate that the specified tracks exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthGetPlaylistCoverImageAsync(System.String)">
            <summary>
            Get a Playlist Cover Image
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <returns>Image Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUploadCustomPlaylistImageAsync(System.String,System.Byte[])">
            <summary>
            Upload a Custom Playlist Cover Image
            <para>Scopes: UserGeneratedContentImageUpload, PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="file">(Required) JPEG Image File Bytes</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserPlaylistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of Current User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100. Use with limit to get the next set of playlists.</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthChangePlaylistDetailsAsync(System.String,Spotify.NetStandard.Requests.PlaylistRequest)">
            <summary>
            Change a Playlist's Details
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="request">(Optional) Playlist Request Object</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserPlaylistsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of a User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthReplacePlaylistTracksAsync(System.String,Spotify.NetStandard.Requests.UriListRequest)">
            <summary>
            Replace a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) Uri List Request.</param>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthCreatePlaylistAsync(System.String,Spotify.NetStandard.Requests.PlaylistRequest)">
            <summary>
            Create a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="request">(Required) Playlist Request</param>
            <returns>Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthReorderPlaylistTracksAsync(System.String,Spotify.NetStandard.Requests.PlaylistReorderRequest)">
            <summary>
            Reorder a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="request">(Required) Playlist Reorder Request</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupCheckUserSavedAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthSaveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Tracks for User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthRemoveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthSaveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthRemoveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove User's Saved Tracks
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserSavedAlbumsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserSavedTracksAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupCheckUserSavedTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackNextTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Next Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackSeekTrackAsync(System.Int32,System.String)">
            <summary>
            Seek To Position In Currently Playing Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="position">(Required) The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserPlaybackDevicesAsync">
            <summary>
            Get a User's Available Devices
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <returns>Devices Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackToggleShuffleAsync(System.Boolean,System.String)">
            <summary>
            Toggle Shuffle For User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) true : Shuffle user’s playback, false : Do not shuffle user’s playback</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackTransferAsync(Spotify.NetStandard.Requests.DevicesRequest)">
            <summary>
            Transfer a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="request">(Required) Devices Request Object</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserRecentlyPlayedTracksAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get Current User's Recently Played Tracks
            <para>Scopes: ListeningRecentlyPlayed</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: A Unix timestamp in milliseconds. Returns all items after (but not including) this cursor position. If after is specified, before must not be specified. Before - (Optional) A Unix timestamp in milliseconds. Returns all items before (but not including) this cursor position. If before is specified, after must not be specified.</param>
            <returns>Cursor Paging of Play History Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackStartResumeAsync(Spotify.NetStandard.Requests.PlaybackRequest,System.String)">
            <summary>
            Start/Resume a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="request">(Optional) Playback Request Object</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackSetRepeatModeAsync(Spotify.NetStandard.Enums.RepeatState,System.String)">
            <summary>
            Set Repeat Mode On User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackPauseAsync(System.String)">
            <summary>
            Pause a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackPreviousTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Previous Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserPlaybackCurrentAsync(System.String)">
            <summary>
            Get Information About The User's Current Playback
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserPlaybackCurrentTrackAsync(System.String)">
            <summary>
            Get the User's Currently Playing Track
            <para>Scopes: ConnectReadCurrentlyPlaying, ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Simplified Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthUserPlaybackSetVolumeAsync(System.Int32,System.String)">
            <summary>
            Set Volume For User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="percent">(Required) The volume to set. Must be a value from 0 to 100 inclusive.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserTopArtistsAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Artists
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserTopTracksAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Tracks
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserProfileAsync(System.String)">
            <summary>
            Get a User's Profile
            </summary>
            <param name="userId">The user’s Spotify user ID.</param>
            <returns>Public User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Interfaces.ISpotifyClient.AuthLookupUserProfileAsync">
            <summary>
            Get Current User's Profile
            <para>Scopes: UserReadEmail, UserReadBirthDate, UserReadPrivate</para>
            </summary>
            <returns>Private User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="T:Spotify.NetStandard.Client.Internal.Extensions">
            <summary>
            Extension Methods
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.GetPropertyDescription(System.Reflection.PropertyInfo)">
            <summary>
            Get Property Description
            </summary>
            <param name="info">Property Info</param>
            <returns>Description as String</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.FromBools``1(``0)">
            <summary>
            From Bools
            </summary>
            <typeparam name="T">Source Type</typeparam>
            <param name="source">Type</param>
            <returns>String Array</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Get Dictionary Value or Default
            </summary>
            <typeparam name="TKey">Key Type</typeparam>
            <typeparam name="TValue">Value Type</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="key">Key</param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.GetDescription``1(``0)">
            <summary>
            Get Description
            </summary>
            <typeparam name="T">Value Type</typeparam>
            <param name="value">Value</param>
            <returns>Description as String</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.AsDelimitedString(System.String[])">
            <summary>
            Get Array of String as Delimited String
            </summary>
            <param name="items">Array of Strings</param>
            <returns>Comma delimited String of Strings</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.QueryStringAsDictionary(System.String)">
            <summary>
            Get QueryString As Dictionary
            </summary>
            <param name="querystring">Source QueryString</param>
            <returns>Dictionary of Key Values from QueryString</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.Get(Spotify.NetStandard.Requests.Scope)">
            <summary>
            Get Scope
            </summary>
            <param name="scope">Scope</param>
            <returns>Results</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.Get(Spotify.NetStandard.Requests.IncludeGroup)">
            <summary>
            Get Include Group
            </summary>
            <param name="includeGroup">Include Group Object</param>
            <returns>Results</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.Get(Spotify.NetStandard.Requests.SearchType)">
            <summary>
            Get Search Type
            </summary>
            <param name="searchType">Search Type Object</param>
            <returns>Results</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.Extensions.SetParameter(Spotify.NetStandard.Requests.TuneableTrack,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Set Parameter
            </summary>
            <param name="parameters">Parameters</param>
            <param name="prefix">Prefix</param>
            <param name="tuneableTrack">Tuneable Track Object</param>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.CreateClient(System.TimeSpan,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Create Client
            </summary>
            <param name="timeout">TimeSpan</param>
            <param name="extraHeaders">Extra HTTP Headers</param>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetJsonContent``1(``0)">
            <summary>
            Get Json Content
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <param name="requestPayload">Request Payload</param>
            <returns>HttpContent</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetJsonContent(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get Json Content
            </summary>
            <param name="requestBody">Dictionary of String, String</param>
            <returns>HttpContent</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetJpegContent(System.Byte[])">
            <summary>
            Get Jpeg Content
            </summary>
            <param name="fileBytes">File Bytes</param>
            <returns>Http Content</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.CreateHttpRequest(System.Net.Http.HttpMethod,System.Uri,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create Http Request
            </summary>
            <param name="method">Http Method e.g. GET, POST</param>
            <param name="uri">Uri</param>
            <param name="content">Http Content</param>
            <param name="extraHeaders">Extra Http Headers</param>
            <returns>HttpRequestMessage</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.ParseResponseAsync``2(System.Net.Http.HttpResponseMessage)">
            <summary>
            Parse Response
            </summary>
            <typeparam name="TResult">Result</typeparam>
            <typeparam name="TErrorResult">Error Result</typeparam>
            <param name="message">HttpResponseMessage</param>
            <returns>SimpleServiceResponse of Result, Error Result</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.SetClientHeaders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set Client Headers
            </summary>
            <param name="headers">Http Headers</param>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.ClearClientHeaders">
            <summary>
            Clear Client Headers
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetContent``1(``0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get Content
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <param name="request">Request of Type</param>
            <param name="requestBody">Request Body</param>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.RequestAsync``2(System.Uri,System.String,System.Net.Http.HttpMethod,System.Net.Http.HttpContent,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            HTTP Request
            </summary>
            <typeparam name="TResult">The result data contract type</typeparam>
            <typeparam name="TErrorResult">The error result data contract type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="method">HTTP Method</param>
            <param name="content">HTTP Content</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="requestParameters">Optional query string parameters</param>
            <param name="extraHeaders">Optional HTTP headers</param>
            <returns>SimpleServiceResult</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetUri(System.Uri,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            GetUri
            </summary>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="requestParameters">Optional query string parameters</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.Dispose">
            <summary>
            Dispose Object
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetRequestAsync``1(System.Uri,System.String,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            GET Request
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="parameters">Optional query string parameters</param>
            <param name="headers">Optional HTTP headers</param>
            <returns>Response and Status Code</returns>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetRequestAsync``2(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            GET Request
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <typeparam name="TRequest">Request Type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Optional Request</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="parameters">Optional query string parameters</param>
            <param name="headers">Optional HTTP headers</param>
            <returns>Response and Status Code</returns>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.GetRequestAsync``3(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            HTTP GET Request
            </summary>
            <typeparam name="TRequest">The request data type</typeparam>
            <typeparam name="TResult">The result data contract type</typeparam>
            <typeparam name="TErrorResult">The error result data contract type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Optional Request Object</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="requestParameters">Optional query string parameters</param>
            <param name="extraHeaders">Optional HTTP headers</param>
            <returns>SimpleServiceResult</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.PostRequestAsync``2(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            POST Request
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <typeparam name="TRequest">Request Type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Optional Request</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="body">Optional Body Parameters</param>
            <param name="parameters">Optional query string parameters</param>
            <param name="headers">Optional HTTP headers</param>
            <param name="useFormContent">Use Form Content</param>
            <returns>Response and Status Code</returns>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.PostRequestAsync``2(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST Request
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <typeparam name="TRequest">Request Type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Optional Request</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="body">Optional Body Parameters</param>
            <param name="parameters">Optional query string parameters</param>
            <param name="headers">Optional HTTP headers</param>
            <returns>Response and Status Code</returns>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.PostRequestAsync``3(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            HTTP POST Request
            </summary>
            <typeparam name="TRequest">The request data type</typeparam>
            <typeparam name="TResult">The result data contract type</typeparam>
            <typeparam name="TErrorResult">The error result data contract type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Request</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="requestBody">Optional Request Body</param>
            <param name="requestParameters">Optional query string parameters</param>
            <param name="extraHeaders">Optional HTTP headers</param>
            <param name="useFormContent">Use Form Content</param>
            <returns>SimpleServiceResult</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.DeleteRequestAsync``2(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            DELETE Request
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Request Object</param>
            <param name="cancellationToken"></param>
            <param name="parameters">Optional query string parameters</param>
            <param name="headers">Optional HTTP headers</param>
            <returns>Response and Status Code</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.DeleteRequestAsync``3(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            HTTP DELETE Request
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResult">The result data contract type</typeparam>
            <typeparam name="TErrorResult">The error result data contract type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Request Object</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="requestParameters">Optional query string parameters</param>
            <param name="extraHeaders">Optional HTTP headers</param>
            <returns>SimpleServiceResult</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.PutRequestAsync``1(System.Uri,System.String,System.Threading.CancellationToken,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            PUT Request
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="fileBytes">Optional Request File Bytes</param>
            <param name="parameters">Optional query string parameters</param>
            <param name="headers">Optional HTTP headers</param>
            <returns>Response and Status Code</returns>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.PutRequestAsync``2(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            PUT Request
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Optional Request</param>
            <param name="cancellationToken">Cancellation Token</param>
            <param name="fileBytes">Optional Request File Bytes</param>
            <param name="parameters">Optional query string parameters</param>
            <param name="headers">Optional HTTP headers</param>
            <returns>Response and Status Code</returns>
            <returns></returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SimpleServiceClient.PutRequestAsync``3(System.Uri,System.String,``0,System.Threading.CancellationToken,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            HTTP PUT Request
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResult">The result data contract type</typeparam>
            <typeparam name="TErrorResult">The error result data contract type</typeparam>
            <param name="hostname">The HTTP host</param>
            <param name="relativeUri">A relative URL to append at the end of the HTTP host</param>
            <param name="request">Request of Type</param>
            <param name="cancellationToken"></param>
            <param name="fileBytes">Optional Request File Bytes</param>
            <param name="requestParameters">Optional query string parameters</param>
            <param name="extraHeaders">Optional HTTP headers</param>
            <returns>SimpleServiceResult</returns>
        </member>
        <member name="T:Spotify.NetStandard.Client.Internal.SimpleServiceResult`2">
            <summary>
            Simple Service Result
            </summary>
            <typeparam name="TResult">Result</typeparam>
            <typeparam name="TErrorResult">Error Result</typeparam>
        </member>
        <member name="T:Spotify.NetStandard.Client.Internal.SpotifyApi">
            <summary>
            Spotify API
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.#ctor(Spotify.NetStandard.Client.Interfaces.ISpotifyClient)">
            <summary>
            Spotify API
            </summary>
            <param name="client">Spotify Client</param>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetAuthorisationCodeAuthUri(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Get Authorisation Code Auth Uri - Authorisation Code Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetAuthorisationCodeAuthTokenAsync(System.Uri,System.Uri,System.String)">
            <summary>
            Get Authorisation Code Auth Token - Authorisation Code Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetClientCredentialsAuthTokenAsync">
            <summary>
            Get Client Credentials Auth Token - Client Credentials Flow
            </summary>
            <returns>AccessToken on Success, Null if Not</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetImplicitGrantAuthUri(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Get Implicit Grant Auth Uri - Implicit Grant Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetImplicitGrantAuthToken(System.Uri,System.Uri,System.String)">
            <summary>
            Get Implicit Grant Auth Token - Implicit Grant Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.SearchForItemAsync(System.String,Spotify.NetStandard.Requests.SearchType,System.String,System.Nullable{System.Boolean},Spotify.NetStandard.Requests.Page)">
            <summary>
            Search for an Item
            </summary>
            <param name="query">(Required) Search query keywords and optional field filters and operators.</param>
            <param name="searchType">(Required) List of item types to search across.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token.</param>
            <param name="external">(Optional) Include any relevant audio content that is hosted externally. </param>
            <param name="page">(Optional) Limit: Maximum number of results to return. Default: 20 Minimum: 1 Maximum: 50 - Offset: The index of the first track to return</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetAllCategoriesAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get All Categories
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore.</param>
            <param name="page">(Optional) Limit: The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50. Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Category Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetCategoryAsync(System.String,System.String,System.String)">
            <summary>
            Get a Category
            </summary>
            <param name="categoryId">(Required) The Spotify category ID for the category.</param>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore.</param>
            <returns>Category Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetCategoryPlaylistsAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get a Category's Playlists
            </summary>
            <param name="categoryId">(Required) The Spotify category ID for the category.</param>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetRecommendationsAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.String,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack)">
            <summary>
            Get Recommendations
            </summary>
            <param name="seedArtists">(Required) List of Spotify IDs for seed artists. Up to 5 seed values may be provided in any combination of seedArtists, seedTracks and seedGenres.</param>
            <param name="seedGenres">(Required) List of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of seedArtists, seedTracks and seedGenres.</param>
            <param name="seedTracks">(Required) List of Spotify IDs for a seed track. Up to 5 seed values may be provided in any combination of seedArtists, seedTracks and seedGenres.</param>
            <param name="limit">(Optional) The target size of the list of recommended tracks. Default: 20. Minimum: 1. Maximum: 100.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="minTuneableTrack">(Optional) Multiple values. For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided</param>
            <param name="maxTuneableTrack">(Optional) Multiple values. For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided.</param>
            <param name="targetTuneableTrack">(Optional) Multiple values. For each of the tunable track attributes (below) a target value may be provided.</param>
            <returns>Recommendation Response Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetRecommendationGenresAsync">
            <summary>
            Get Recommendation Genres
            </summary>
            <returns>Available Genre Seeds Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetAllNewReleasesAsync(System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get All New Releases
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetAllFeaturedPlaylistsAsync(System.String,System.String,System.Nullable{System.DateTime},Spotify.NetStandard.Requests.Page)">
            <summary>
            Get All Featured Playlists
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country</param>
            <param name="locale">(Optional) The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore</param>
            <param name="timeStamp">(Optional) Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day.</param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetFollowingStateForArtistsOrUsersAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Get Following State for Artists/Users
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="ids">(Required) List of the artist or the user Spotify IDs to check.</param>
            <param name="followType">(Required) Either artist or user.</param>
            <returns>List of true or false values</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.CheckUsersFollowingPlaylistAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Check if Users Follow a Playlist
            <para>Scopes: PlaylistReadPrivate</para>
            </summary>
            <param name="ids">(Required) List of Spotify User IDs, the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.</param>
            <param name="playlistId">(Required) The Spotify ID of the playlist.</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.FollowArtistsOrUsersAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Follow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="ids">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.FollowPlaylistAsync(System.String,System.Boolean)">
            <summary>
            Follow a Playlist
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist. Any playlist can be followed, regardless of its public/private status, as long as you know its playlist ID.</param>
            <param name="isPublic">(Optional) Defaults to true. If true the playlist will be included in user’s public playlists, if false it will remain private. To be able to follow playlists privately, the user must have granted the playlist-modify-private scope.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUsersFollowedArtistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Followed Artists
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: The last artist ID retrieved from the previous request.</param>
            <returns>CursorPaging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UnfollowArtistsOrUsersAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Unfollow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="ids">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UnfollowPlaylistAsync(System.String)">
            <summary>
            Unfollow Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist that is to be no longer followed.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.AddTracksToPlaylistAsync(System.String,System.Collections.Generic.List{System.String},System.Nullable{System.Int32})">
            <summary>
            Add Tracks to a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) List of Spotify track URIs to add.</param>
            <param name="position">(Optional) The position to insert the tracks, a zero-based index.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetPlaylistAsync(System.String)">
            <summary>
            Get a Playlist
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <returns>Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.RemoveTracksFromPlaylistAsync(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Remove Tracks from a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="tracks">(Required) List of Spotify URIs of the tracks to remove</param>
            <param name="snapshotId">(Optional) The playlist’s snapshot ID against which you want to make the changes. The API will validate that the specified tracks exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetPlaylistTracksAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get a Playlist's Tracks
            </summary>
            <param name="id">(Required) The Spotify ID for the playlist.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Paging List of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetPlaylistCoverImageAsync(System.String)">
            <summary>
            Get a Playlist Cover Image
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <returns>List of Image Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UploadCustomPlaylistCoverImageAsync(System.String,System.Byte[])">
            <summary>
            Upload a Custom Playlist Cover Image
            <para>Scopes: UserGeneratedContentImageUpload, PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="file">(Required) JPEG Image File Bytes</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserPlaylistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of Current User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100. Use with limit to get the next set of playlists.</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.ChangePlaylistDetailsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Change a Playlist's Details
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="name">(Optional) The new name for the playlist, for example "My New Playlist Title"</param>
            <param name="isPublic">(Optional) If true the playlist will be public, if false it will be private.</param>
            <param name="isCollaborative">(Optional) If true , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. Note: You can only set collaborative to true on non-public playlists.</param>
            <param name="description">(Optional) Value for playlist description as displayed in Spotify Clients and in the Web API.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserPlaylistsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of a User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.ReplacePlaylistTracksAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Replace a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) List of Spotify track URIs.</param>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.CreatePlaylistAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Create a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="name">(Required) The name for the new playlist, for example "Your Coolest Playlist" . This name does not need to be unique; a user may have several playlists with the same name.</param>
            <param name="isPublic">(Optional) Defaults to true . If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope</param>
            <param name="isCollaborative">(Optional) Defaults to false . If true the playlist will be collaborative. Note that to create a collaborative playlist you must also set public to false . To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.</param>
            <param name="description">(Optional) Value for playlist description as displayed in Spotify Clients and in the Web API.</param>
            <returns>Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.ReorderPlaylistTracksAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Reorder a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">The Spotify ID for the playlist.</param>
            <param name="rangeStart">(Required) The position of the first track to be reordered.</param>
            <param name="insertBefore">(Required) The position where the tracks should be inserted. To reorder the tracks to the end of the playlist, simply set insert_before to the position after the last track.</param>
            <param name="rangeLength">(Optional) The amount of tracks to be reordered. Defaults to 1 if not set. The range of tracks to be reordered begins from the range_start position, and includes the range_length subsequent tracks.</param>
            <param name="snapshotId">(Optional) The playlist’s snapshot ID against which you want to make the changes.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.CheckUserSavedAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.SaveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Tracks for User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.RemoveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.SaveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.RemoveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove User's Saved Tracks
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserSavedAlbumsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserSavedTracksAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.CheckUserSavedTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetMultipleArtistsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Get Multiple Artists
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the artists. Maximum: 50 IDs.</param>
            <returns>List of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetArtistAsync(System.String)">
            <summary>
            Get an Artist
            </summary>
            <param name="id">(Required) The Spotify ID of the artist.</param>
            <returns>Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetArtistAlbumsAsync(System.String,Spotify.NetStandard.Requests.IncludeGroup,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get an Artist's Albums
            </summary>
            <param name="id">(Required) The Spotify ID for the artist.</param>
            <param name="includeGroup">(Optional) Filters the response. If not supplied, all album types will be returned</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="page">(Optional) Limit: The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first album to return. Default: 0</param>
            <returns>Paging List of Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetArtistTopTracksAsync(System.String,System.String)">
            <summary>
            Get an Artist's Top Tracks
            </summary>
            <param name="id">(Required) The Spotify ID for the artist.</param>
            <param name="market">(Required) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <returns>List of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetArtistRelatedArtistsAsync(System.String)">
            <summary>
            Get an Artist's Related Artists
            </summary>
            <param name="id">(Requird) The Spotify ID for the artist.</param>
            <returns>List of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackNextTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Next Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackSeekTrackAsync(System.Int32,System.String)">
            <summary>
            Seek To Position In Currently Playing Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="position">(Required) The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserPlaybackDevicesAsync">
            <summary>
            Get a User's Available Devices
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <returns>Devices Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackToggleShuffleAsync(System.Boolean,System.String)">
            <summary>
            Toggle Shuffle For User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) true : Shuffle user’s playback, false : Do not shuffle user’s playback</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackTransferAsync(System.Collections.Generic.List{System.String},System.Nullable{System.Boolean})">
            <summary>
            Transfer a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceIds">(Required) List containing the ID of the device on which playback should be started/transferred. Although an array is accepted, only a single device_id is currently supported.</param>
            <param name="play">(Optional) true: ensure playback happens on new device. false or not provided: keep the current playback state.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserRecentlyPlayedTracksAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get Current User's Recently Played Tracks
            <para>Scopes: ListeningRecentlyPlayed</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: A Unix timestamp in milliseconds. Returns all items after (but not including) this cursor position. If after is specified, before must not be specified. Before - (Optional) A Unix timestamp in milliseconds. Returns all items before (but not including) this cursor position. If before is specified, after must not be specified.</param>
            <returns>Cursor Paging of Play History Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackStartResumeAsync(System.String,System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Start/Resume a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="contextUri">(Optional) Spotify URI of the context to play. Valid contexts are albums, artists, playlists. Example: "spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"</param>
            <param name="uris">(Optional) List of the Spotify track URIs to play. For example: ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}</param>
            <param name="offsetUri">(Optional) Use either offsetUri or offsetPosition, Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object, or when the uris parameter is used. “position” is zero based and can’t be negative. Example: 5.</param>
            <param name="offsetPosition">(Optional) Use either offsetPosition or offsetUri, Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object, or when the uris parameter is used. “uri” is a string representing the uri of the item to start at. Example: "spotify:track:1301WleyT98MSxVHPZCA6M"</param>
            <param name="position">(Optional) Indicates from what position to start playback.Must be a positive number.Passing in a position that is greater than the length of the track will cause the player to start playing the next song.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackSetRepeatModeAsync(Spotify.NetStandard.Enums.RepeatState,System.String)">
            <summary>
            Set Repeat Mode On User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackPauseAsync(System.String)">
            <summary>
            Pause a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackPreviousTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Previous Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserPlaybackCurrentAsync(System.String)">
            <summary>
            Get Information About The User's Current Playback
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserPlaybackCurrentTrackAsync(System.String)">
            <summary>
            Get the User's Currently Playing Track
            <para>Scopes: ConnectReadCurrentlyPlaying, ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Simplified Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.UserPlaybackSetVolumeAsync(System.Int32,System.String)">
            <summary>
            Set Volume For User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="percent">(Required) The volume to set. Must be a value from 0 to 100 inclusive.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserTopArtistsAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Artists
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserTopTracksAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Tracks
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserProfileAsync(System.String)">
            <summary>
            Get a User's Profile
            </summary>
            <param name="userId">The user’s Spotify user ID.</param>
            <returns>Public User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetUserProfileAsync">
            <summary>
            Get Current User's Profile
            <para>Scopes: UserReadEmail, UserReadBirthDate, UserReadPrivate</para>
            </summary>
            <returns>Private User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetMultipleAlbumsAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get Multiple Albums
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the albums. Maximum: 20 IDs.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>List of Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetAlbumAsync(System.String,System.String)">
            <summary>
            Get an Album
            </summary>
            <param name="id">(Required) The Spotify ID of the album.</param>
            <param name="market">(Optional) The market you’d like to request. An ISO 3166-1 alpha-2 country code.</param>
            <returns>Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetAlbumTracksAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Get an Album's Tracks
            </summary>
            <param name="id">(Required) The Spotify ID of the album.</param>      
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="page">(Optional) Limit: The maximum number of tracks to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first track to return</param>
            <returns>Paging of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetTrackAudioFeaturesAsync(System.String)">
            <summary>
            Get Audio Features for a Track
            </summary>
            <param name="id">(Required) The Spotify ID for the track</param>
            <returns>Audio Features Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetTrackAsync(System.String,System.String)">
            <summary>
            Get a Track
            </summary>
            <param name="id">(Required) The Spotify ID for the track.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetTrackAudioAnalysisAsync(System.String)">
            <summary>
            Get Audio Analysis for a Track
            </summary>
            <param name="id">(Required) The Spotify ID for the track</param>
            <returns>Audio Analysis Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetSeveralTracksAudioFeaturesAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Get Audio Features for Several Tracks
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the tracks. Maximum: 100 IDs.</param>
            <returns>List of Audio Features Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyApi.GetSeveralTracksAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get Several Tracks
            </summary>
            <param name="ids">(Required) List of the Spotify IDs for the tracks. Maximum: 50 IDs.</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>List of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="T:Spotify.NetStandard.Client.Internal.SpotifyClient">
            <summary>
            Spotify Client
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.FormatRequestHeadersAsync(Spotify.NetStandard.Client.Authentication.Enums.TokenType)">
            <summary>
            Format Request Headers
            </summary>
            <param name="tokenType">Authentication Token Type</param>
            <returns>Dictionary of Headers</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.FormatRequestParameters(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Format Request Parameters
            </summary>
            <param name="limit">Limit</param>
            <param name="offset">Offset</param>
            <param name="country">Country</param>
            <param name="locale">Locale</param>
            <returns>Dictionary of Request Parameters</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.FormatIdsParameter(System.Collections.Generic.List{System.String})">
            <summary>
            Format Ids Parameter
            </summary>
            <param name="itemIds">IDs of the Items</param>
            <returns>Ids as String</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.FormatCursorParameters(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Format Cursor Parameters
            </summary>
            <param name="limit">Limit</param>
            <param name="after">After</param>
            <param name="before">Before</param>
            <returns>Dictionary of Request Parameters</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.GetStatus``1(``0,System.Int32,System.Int32)">
            <summary>
            Get Status
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="response"></param>
            <param name="code"></param>
            <param name="successCode"></param>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.GetBrowseAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Spotify.NetStandard.Requests.Page)">
            <summary>
            Browse
            </summary>
            <param name="browseCategory">Category</param>
            <param name="country">Country</param>
            <param name="locale">Locale</param>
            <param name="parameters">Parameters</param>
            <param name="page">Page</param>
            <returns>Content Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupApiAsync``1(System.String,System.String,System.String,System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup API
            </summary>
            <typeparam name="TResult">Result Type</typeparam>
            <param name="itemId">Spotify ID of the Item</param>
            <param name="lookupType">Lookup Type</param>
            <param name="country">Country</param>
            <param name="key">Parameter Key</param>
            <param name="value">Parameter Value</param>
            <param name="page">Page Offset and Limit</param>
            <returns>Response of Type</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupApiAsync(System.Collections.Generic.List{System.String},System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup API
            </summary>
            <param name="itemIds">Spotify IDs of the Items</param>
            <param name="lookupType">Lookup Type</param>
            <param name="country">Country</param>
            <param name="page">Page Offset and Limit</param>
            <returns>Lookup Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupCursorApiAsync``1(System.String,System.String,System.String,Spotify.NetStandard.Requests.Cursor,Spotify.NetStandard.Client.Authentication.Enums.TokenType)">
            <summary>
            Lookup Cursor API
            </summary>
            <typeparam name="TResult">Result Type</typeparam>
            <param name="lookupType">Lookup Type</param>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="cursor">Cursor Limit and After</param>
            <param name="tokenType">Token Type</param>
            <returns>Response Object</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.GetApiAsync``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Spotify.NetStandard.Client.Authentication.Enums.TokenType)">
            <summary>
            Get API
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="itemId">Spotify ID of the Item</param>
            <param name="lookupType">Lookup Type</param>
            <param name="parameters">Request Parameters</param>
            <param name="tokenType">Token Type</param>
            <returns>Response Object</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.GetApiAsync``1(System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},Spotify.NetStandard.Client.Authentication.Enums.TokenType)">
            <summary>
            Get API
            </summary>
            <typeparam name="TResponse">Reponse Type</typeparam>
            <param name="itemIds">Spotify IDs of the Items</param>
            <param name="lookupType">Lookup Type</param>
            <param name="parameters">Request Parameters</param>
            <param name="tokenType">Token Type</param>
            <returns>Response Object</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.PostApiAsync``2(System.Collections.Generic.List{System.String},System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},Spotify.NetStandard.Client.Authentication.Enums.TokenType,System.Int32)">
            <summary>
            Post API
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="itemIds">Spotify IDs of the Items</param>
            <param name="lookupType">Lookup Type</param>
            <param name="request">Request</param>
            <param name="body">Request Body</param>
            <param name="parameters">Request Parameters</param>
            <param name="tokenType">Token Type</param>
            <param name="successCode">Success Code</param>
            <returns>Response Object</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.PostApiAsync``2(System.Collections.Generic.List{System.String},System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},Spotify.NetStandard.Client.Authentication.Enums.TokenType)">
            <summary>
            Post API
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="itemIds">Spotify IDs of the Items</param>
            <param name="lookupType">Lookup Type</param>
            <param name="request">Request Object</param>
            <param name="body">Request Body</param>
            <param name="parameters">Request Parameters</param>
            <param name="tokenType">Token Type</param>
            <returns>Response Object</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.PutApiAsync``2(System.Collections.Generic.List{System.String},System.String,``0,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String},Spotify.NetStandard.Client.Authentication.Enums.TokenType,System.Int32)">
            <summary>
            Put API
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="tokenType">Auth Type</param>
            <param name="itemIds">Spotify IDs of the Items</param>
            <param name="lookupType">Lookup Type</param>
            <param name="request">Request Object</param>
            <param name="fileBytes">File Bytes</param>
            <param name="parameters">Request Parameters</param>
            <param name="successCode">Success Code</param>
            <returns>Response Object</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.DeleteApiAsync``2(System.Collections.Generic.List{System.String},System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String},Spotify.NetStandard.Client.Authentication.Enums.TokenType,System.Int32)">
            <summary>
            Delete API
            </summary>
            <typeparam name="TRequest">Request Type</typeparam>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="tokenType">Auth Type</param>
            <param name="itemIds">Spotify IDs of the Items</param>
            <param name="lookupType">Lookup Type</param>
            <param name="request">Request Object</param>
            <param name="parameters">Request Parameters</param>
            <param name="successCode">Success Code</param>
            <returns>Response Object</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.#ctor(Spotify.NetStandard.Client.Authentication.Internal.AuthenticationCache)">
            <summary>
            Spotify Client
            </summary>
            <param name="authenticationCache">Authentication Cache</param>
        </member>
        <member name="P:Spotify.NetStandard.Client.Internal.SpotifyClient.Api">
            <summary>
            Spotify API
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.GetToken">
            <summary>
            Get Access Token
            </summary>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.SetToken(Spotify.NetStandard.Client.Authentication.AccessToken)">
            <summary>
            Set Access Token
            </summary>
            <param name="value">Access Token</param>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.RefreshToken">
            <summary>
            Refresh Token
            </summary>
            <param name="type">Token Type</param>
            <returns>Access Token</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.GetAsync``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="hostname">Hostname</param>
            <param name="endpoint">Endpoint</param>
            <param name="parameters">Parameters</param>
            <returns>Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.GetAsync``1(System.Uri)">
            <summary>
            Get
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="source">Source Uri</param>
            <returns>Response</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.NavigateAsync``1(Spotify.NetStandard.Responses.Paging{``0},Spotify.NetStandard.Enums.NavigateType)">
            <summary>
            Navigate 
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="paging">Paging Object</param>
            <param name="navigateType">Navigate Type</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.SearchAsync(System.String,Spotify.NetStandard.Requests.SearchType,System.String,System.Nullable{System.Boolean},Spotify.NetStandard.Requests.Page)">
            <summary>
            Search
            </summary>
            <param name="query">(Required) Search Query</param>
            <param name="searchType">(Required) Search results include hits from all the specified item types.</param>
            <param name="country">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="external">(Optional) Include any relevant audio content that is hosted externally. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return - Offset: The index of the first item to return</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupAsync``1(System.String,Spotify.NetStandard.Enums.LookupType,System.String,System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup
            </summary>
            <typeparam name="TResponse">Response Type</typeparam>
            <param name="itemId">(Required) The Spotify ID for the album.</param>
            <param name="lookupType">(Required) Item Type</param>
            <param name="market">(Optional) ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="key">(Optional) Query Parameter Key</param>
            <param name="value">(Optional) Query Parameter Value</param>
            <param name="page">(Optional) Limit: The maximum number of items to return - Offset: The index of the first item to return</param>
            <returns>Lookup Response by Type</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.LookupType,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup
            </summary>
            <param name="itemIds">(Required) List of Spotify ID for the items</param>
            <param name="lookupType">(Required) Lookup Item Type</param>
            <param name="market">(Optional) ISO 3166-1 alpha-2 country code or the string from_token</param>
            <param name="page">(Optional) Limit: The maximum number of items to return - Offset: The index of the first item to return</param>
            <returns>Lookup Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupFeaturedPlaylistsAsync(System.String,System.String,System.Nullable{System.DateTime},Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup Featured Playlists
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore</param>
            <param name="timestamp">(Optional) Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day.</param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupNewReleasesAsync(System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup New Releases
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="page">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupArtistAlbumsAsync(System.String,Spotify.NetStandard.Requests.IncludeGroup,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup Artist's Albums
            </summary>
            <param name="itemId">(Required) The Spotify ID for the artist.</param>
            <param name="includeGroup">(Optional) Filters the response. If not supplied, all album types will be returned</param>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code</param>
            <param name="page">(Optional) Limit: The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50 - Offset: The index of the first album to return. Default: 0 (i.e., the first album).</param>
            <returns>Paging List of Album</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupArtistTopTracksAsync(System.String,System.String)">
            <summary>
            Lookup Artist's Top Tracks
            </summary>
            <param name="itemId">(Required) The Spotify ID for the artist.</param>
            <param name="market">(Required) A country: an ISO 3166-1 alpha-2 country code or the string from_token</param>
            <returns>Lookup Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupArtistRelatedArtistsAsync(System.String)">
            <summary>
            Lookup Artist's Related Artists
            </summary>
            <param name="itemId">(Required) The Spotify ID for the artist.</param>
            <returns>Lookup Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupAllCategoriesAsync(System.String,System.String,Spotify.NetStandard.Requests.Page)">
            <summary>
            Lookup All Categories
            </summary>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore</param>
            <param name="page">(Optional) Limit: The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first item to return. Default: 0</param>
            <returns>Content Response</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupCategoryAsync(System.String,System.String,System.String)">
            <summary>
            Lookup Category 
            </summary>
            <param name="categoryId">The Spotify category ID for the category.</param>
            <param name="country">(Optional) A country: an ISO 3166-1 alpha-2 country code. </param>
            <param name="locale">(Optional) The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore.</param>
            <returns>Category Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupRecommendationsAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.String,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack,Spotify.NetStandard.Requests.TuneableTrack)">
            <summary>
            Lookup Recommendations
            </summary>
            <param name="seedArtists">List of Spotify IDs for seed artists</param>
            <param name="seedGenres">List of any genres in the set of available genre seeds</param>
            <param name="seedTracks">List of Spotify IDs for a seed track</param>
            <param name="limit">The target size of the list of recommended tracks. Default: 20. Minimum: 1. Maximum: 100.</param>
            <param name="market">An ISO 3166-1 alpha-2 country code</param>
            <param name="minTuneableTrack">Multiple values. For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided</param>
            <param name="maxTuneableTrack">Multiple values. For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided.</param>
            <param name="targetTuneableTrack">Multiple values. For each of the tunable track attributes a target value may be provided.</param>
            <returns>Recommendation Response Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.LookupRecommendationGenres">
            <summary>
            Lookup Recommendation Genres
            </summary>
            <returns>Available Genre Seeds Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthAccessTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUser(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Auth User - Authorisation Code Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserAsync(System.Uri,System.Uri,System.String)">
            <summary>
            Auth User - Authorisation Code Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthCodeStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthAsync">
            <summary>
            Auth - Client Credentials Flow
            </summary>
            <returns>AccessToken on Success, Null if Not</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserImplicit(System.Uri,System.String,Spotify.NetStandard.Requests.Scope,System.Boolean)">
            <summary>
            Auth User Implicit - Implicit Grant Flow
            </summary>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <param name="scope">Scope</param>
            <returns>Uri</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserImplicit(System.Uri,System.Uri,System.String)">
            <summary>
            Auth User Implicit - Implicit Grant Flow
            </summary>
            <param name="responseUri">Response Uri</param>
            <param name="redirectUri">Redirect Uri</param>
            <param name="state">State</param>
            <returns>AccessToken on Success, Null if Not</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenValueException">AuthCodeValueException</exception>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthTokenStateException">AuthCodeStateException</exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupFollowingStateAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Get Following State for Artists/Users
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="itemIds">(Required) List of the artist or the user Spotify IDs to check.</param>
            <param name="followType">(Required) Either artist or user.</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserFollowingPlaylistAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Check if Users Follow a Playlist
            <para>Scopes: PlaylistReadPrivate</para>
            </summary>
            <param name="itemIds">(Required) List of Spotify User IDs, the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.</param>
            <param name="playlistId">(Required) The Spotify ID of the playlist.</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthFollowAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Follow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="itemIds">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthFollowPlaylistAsync(System.String,System.Boolean)">
            <summary>
            Follow a Playlist
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist. Any playlist can be followed, regardless of its public/private status, as long as you know its playlist ID.</param>
            <param name="isPublic">(Optional) Defaults to true. If true the playlist will be included in user’s public playlists, if false it will remain private. To be able to follow playlists privately, the user must have granted the playlist-modify-private scope.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupFollowedArtistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Followed Artists
            <para>Scopes: FollowRead</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: The last artist ID retrieved from the previous request.</param>
            <returns>CursorPaging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUnfollowAsync(System.Collections.Generic.List{System.String},Spotify.NetStandard.Enums.FollowType)">
            <summary>
            Unfollow Artists or Users
            <para>Scopes: FollowModify</para>
            </summary>
            <param name="itemIds">(Required) List of the artist or the user Spotify IDs.</param>
            <param name="followType">(Required) Either artist or user</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUnfollowPlaylistAsync(System.String)">
            <summary>
            Unfollow Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID of the playlist that is to be no longer followed.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthAddTracksToPlaylistAsync(System.String,Spotify.NetStandard.Requests.UriListRequest,System.Nullable{System.Int32})">
            <summary>
            Add Tracks to a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) List of Spotify track URIs to add.</param>
            <param name="position">(Optional) The position to insert the tracks, a zero-based index.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthRemoveTracksFromPlaylistAsync(System.String,Spotify.NetStandard.Requests.PlaylistTracksRequest)">
            <summary>
            Remove Tracks from a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="request">(Optional) Tracks: An array of objects containing Spotify URIs of the tracks to remove. Snapshot ID : The playlist’s snapshot ID against which you want to make the changes. The API will validate that the specified tracks exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthGetPlaylistCoverImageAsync(System.String)">
            <summary>
            Get a Playlist Cover Image
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <returns>List of Image Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUploadCustomPlaylistImageAsync(System.String,System.Byte[])">
            <summary>
            Upload a Custom Playlist Cover Image
            <para>Scopes: UserGeneratedContentImageUpload, PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="file">(Required) JPEG Image File Bytes</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserPlaylistsAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of Current User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100. Use with limit to get the next set of playlists.</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthChangePlaylistDetailsAsync(System.String,Spotify.NetStandard.Requests.PlaylistRequest)">
            <summary>
            Change a Playlist's Details
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="request">(Optional) Playlist Request Object</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserPlaylistsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a List of a User's Playlists
            <para>Scopes: PlaylistReadPrivate, PlaylistReadCollaborative</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="cursor">(Optional) Limit: The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100</param>
            <returns>CursorPaging of Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthReplacePlaylistTracksAsync(System.String,Spotify.NetStandard.Requests.UriListRequest)">
            <summary>
            Replace a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="uris">(Optional) Uri List Request.</param>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthCreatePlaylistAsync(System.String,Spotify.NetStandard.Requests.PlaylistRequest)">
            <summary>
            Create a Playlist
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="userId">(Required) The user’s Spotify user ID.</param>
            <param name="request">(Required) Playlist Request</param>
            <returns>Playlist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthReorderPlaylistTracksAsync(System.String,Spotify.NetStandard.Requests.PlaylistReorderRequest)">
            <summary>
            Reorder a Playlist's Tracks
            <para>Scopes: PlaylistModifyPublic, PlaylistModifyPrivate</para>
            </summary>
            <param name="playlistId">(Required) The Spotify ID for the playlist.</param>
            <param name="request">(Required) Playlist Reorder Request</param>
            <returns>Snapshot Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupCheckUserSavedAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthSaveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Tracks for User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthRemoveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthSaveUserAlbumsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Save Albums for Current User
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the albums</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthRemoveUserTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Remove User's Saved Tracks
            <para>Scopes: LibraryModify</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserSavedAlbumsAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Albums
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Album Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserSavedTracksAsync(System.String,Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <param name="cursor">(Optional) Limit: The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. - Offset: The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.</param>
            <returns>Cursor Paging of Saved Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupCheckUserSavedTracksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Check User's Saved Tracks
            <para>Scopes: LibraryRead</para>
            </summary>
            <param name="itemIds">(Required) List of the Spotify IDs for the tracks</param>
            <returns>List of true or false values</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackNextTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Next Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackSeekTrackAsync(System.Int32,System.String)">
            <summary>
            Seek To Position In Currently Playing Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="position">(Required) The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserPlaybackDevicesAsync">
            <summary>
            Get a User's Available Devices
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <returns>Devices Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackToggleShuffleAsync(System.Boolean,System.String)">
            <summary>
            Toggle Shuffle For User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) true : Shuffle user’s playback, false : Do not shuffle user’s playback</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackTransferAsync(Spotify.NetStandard.Requests.DevicesRequest)">
            <summary>
            Transfer a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="request">(Required) Devices Request Object</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserRecentlyPlayedTracksAsync(Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get Current User's Recently Played Tracks
            <para>Scopes: ListeningRecentlyPlayed</para>
            </summary>
            <param name="cursor">(Optional) Limit: The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50. - After: A Unix timestamp in milliseconds. Returns all items after (but not including) this cursor position. If after is specified, before must not be specified. Before - (Optional) A Unix timestamp in milliseconds. Returns all items before (but not including) this cursor position. If before is specified, after must not be specified.</param>
            <returns>Cursor Paging of Play History Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackStartResumeAsync(Spotify.NetStandard.Requests.PlaybackRequest,System.String)">
            <summary>
            Start/Resume a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="request">(Optional) Playback Request Object</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackSetRepeatModeAsync(Spotify.NetStandard.Enums.RepeatState,System.String)">
            <summary>
            Set Repeat Mode On User’s Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="state">(Required) track, context or off. track will repeat the current track. context will repeat the current context. off will turn repeat off.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackPauseAsync(System.String)">
            <summary>
            Pause a User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackPreviousTrackAsync(System.String)">
            <summary>
            Skip User’s Playback To Previous Track
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserPlaybackCurrentAsync(System.String)">
            <summary>
            Get Information About The User's Current Playback
            <para>Scopes: ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserPlaybackCurrentTrackAsync(System.String)">
            <summary>
            Get the User's Currently Playing Track
            <para>Scopes: ConnectReadCurrentlyPlaying, ConnectReadPlaybackState</para>
            </summary>
            <param name="market">(Optional) An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking.</param>
            <returns>Simplified Currently Playing Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthUserPlaybackSetVolumeAsync(System.Int32,System.String)">
            <summary>
            Set Volume For User's Playback
            <para>Scopes: ConnectModifyPlaybackState</para>
            </summary>
            <param name="percent">(Required) The volume to set. Must be a value from 0 to 100 inclusive.</param>
            <param name="deviceId">(Optional) The id of the device this command is targeting. If not supplied, the user’s currently active device is the target.</param>
            <returns>Status Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserTopArtistsAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Artists
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Artist Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserTopTracksAsync(System.Nullable{Spotify.NetStandard.Enums.TimeRange},Spotify.NetStandard.Requests.Cursor)">
            <summary>
            Get a User's Top Tracks
            <para>Scopes: ListeningTopRead</para>
            </summary>
            <param name="timeRange">(Optional) Over what time frame the affinities are computed. Long Term: alculated from several years of data and including all new data as it becomes available, Medium Term: (Default) approximately last 6 months, Short Term: approximately last 4 weeks</param>
            <param name="cursor">(Optional) Limit: The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example - Offset: he index of the first entity to return. Default: 0. Use with limit to get the next set of entities.</param>
            <returns>Cursor Paging of Track Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserProfileAsync(System.String)">
            <summary>
            Get a User's Profile
            </summary>
            <param name="userId">The user’s Spotify user ID.</param>
            <returns>Public User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="M:Spotify.NetStandard.Client.Internal.SpotifyClient.AuthLookupUserProfileAsync">
            <summary>
            Get Current User's Profile
            <para>Scopes: UserReadEmail, UserReadBirthDate, UserReadPrivate</para>
            </summary>
            <returns>Private User Object</returns>
            <exception cref="T:Spotify.NetStandard.Client.Exceptions.AuthUserTokenRequiredException"></exception>
        </member>
        <member name="T:Spotify.NetStandard.Client.SpotifyClientFactory">
            <summary>
            Spotify Client Factory
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Client.SpotifyClientFactory.GetOrAddAuthenticationCache(System.String,System.String)">
            <summary>
            Get or Add Authenciation Cache
            </summary>
            <param name="clientId">Spotify Client Id</param>
            <param name="clientSecret">Spotify Client Secret</param>
            <returns>Authentication Cache</returns>
        </member>
        <member name="M:Spotify.NetStandard.Client.SpotifyClientFactory.CreateSpotifyClient(System.String,System.String)">
            <summary>
            Create Spotify Client
            </summary>
            <param name="clientId">Spotify Client Id</param>
            <param name="clientSecret">Spotify Client Secret</param>
            <returns>Spotify Client</returns>
        </member>
        <member name="T:Spotify.NetStandard.Enums.FollowType">
            <summary>
            Follow Type
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.FollowType.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.FollowType.Artist">
            <summary>
            Artist
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Enums.LookupType">
            <summary>
            Lookup Type
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.Categories">
            <summary>
            Categories
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.CategoriesPlaylists">
            <summary>
            Category Playlists
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.Artists">
            <summary>
            Artists
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.Albums">
            <summary>
            Albums
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.Tracks">
            <summary>
            Tracks
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.AlbumTracks">
            <summary>
            Album Tracks
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.ArtistAlbums">
            <summary>
            Artist Albums
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.Playlist">
            <summary>
            Playlists
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.PlaylistTracks">
            <summary>
            Playlist Tracks
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.AudioFeatures">
            <summary>
            Audio Features
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.LookupType.AudioAnalysis">
            <summary>
            Audio Analysis
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Enums.NavigateType">
            <summary>
            Navigate Type
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.NavigateType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.NavigateType.Previous">
            <summary>
            Navigate Previous
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.NavigateType.Next">
            <summary>
            Navigate Next
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Enums.RepeatState">
            <summary>
            Repeat State
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.RepeatState.Track">
            <summary>
            Will repeat the current track
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.RepeatState.Context">
            <summary>
            Will repeat the current context.
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.RepeatState.Off">
            <summary>
            Will turn repeat off.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Enums.TimeRange">
            <summary>
            Time Range
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.TimeRange.LongTerm">
            <summary>
            Calculated from several years of data and including all new data as it becomes available
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.TimeRange.MediumTerm">
            <summary>
            Approximately last 6 months
            </summary>
        </member>
        <member name="F:Spotify.NetStandard.Enums.TimeRange.ShortTerm">
            <summary>
            Approximately last 4 weeks
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.Cursor">
            <summary>
            Cursor Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Cursor.After">
            <summary>
            The cursor to use as key to find the next page of items.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Cursor.Before">
            <summary>
            The cursor to use as key to find the previous page of items.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Cursor.Limit">
            <summary>
            The maximum number of items in the response (as set in the query or by default).
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.DevicesRequest">
            <summary>
            Devices Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.DevicesRequest.DeviceIds">
            <summary>
            (Required) List containing the ID of the device on which playback should be started/transferred. Although an array is accepted, only a single id is currently supported.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.DevicesRequest.Play">
            <summary>
            (Optional) true: ensure playback happens on new device. false or not provided: keep the current playback state.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.IncludeGroup">
            <summary>
            Include Group
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.IncludeGroup.Album">
            <summary>
            Album
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.IncludeGroup.Single">
            <summary>
            Single
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.IncludeGroup.AppearsOn">
            <summary>
            Appears On
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.IncludeGroup.Compilation">
            <summary>
            Compliation
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.Page">
            <summary>
            Page
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Page.Total">
            <summary>
            The total number of items available to return.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Page.Offset">
            <summary>
            The offset of the items returned (as set in the query or by default).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Page.Limit">
            <summary>
            The maximum number of items in the response (as set in the query or by default).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Page.Count">
            <summary>
            Page Count
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Page.Current">
            <summary>
            Get / Set Current Page
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.PlaybackRequest">
            <summary>
            Playback Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaybackRequest.ContextUri">
            <summary>
            (Optional) Spotify URI of the context to play. Valid contexts are albums, artists, playlists. Example: spotify:album:1Je1IMUlBXcx1Fz0WE7oPT
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaybackRequest.Uris">
            <summary>
            (Optional) A JSON array of the Spotify track URIs to play. Example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaybackRequest.Offset">
            <summary>
            (Optional) Indicates from where in the context playback should start. Only available when ContextUri corresponds to an album or playlist object, or when the uris parameter is used. “position” is zero based and can’t be negative. Example: PositionRequest with Position = 5 or a UriRequest with Uri representing the uri of the item to start at. Example: UriRequest with Uri = "spotify:track:1301WleyT98MSxVHPZCA6M"
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaybackRequest.Position">
            <summary>
            (Optional) Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.PlaylistReorderRequest">
            <summary>
            Playlist Reorder Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistReorderRequest.RangeStart">
            <summary>
            (Required) The position of the first track to be reordered. 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistReorderRequest.InsertBefore">
            <summary>
            (Required) The position where the tracks should be inserted. To reorder the tracks to the end of the playlist, simply set insert_before to the position after the last track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistReorderRequest.RangeLength">
            <summary>
            (Optional) The amount of tracks to be reordered. Defaults to 1 if not set. The range of tracks to be reordered begins from the RangeStart position, and includes the RangeLength subsequent tracks.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistReorderRequest.SnapshotId">
            <summary>
            (Optional) The playlist’s snapshot ID against which you want to make the changes.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.PlaylistRequest">
            <summary>
            Playlist Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistRequest.Name">
            <summary>
            The new name for the playlist, for example "My New Playlist Title" 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistRequest.IsPublic">
             <summary>
            (Optional) If true the playlist will be public, if false it will be private. 
             </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistRequest.IsCollaborative">
            <summary>
            (Optional) If true , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. Note: You can only set collaborative to true on non-public playlists. 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistRequest.Description">
            <summary>
            (Optional) Value for playlist description as displayed in Spotify Clients and in the Web API. 
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.PlaylistTracksRequest">
            <summary>
            Playlist Tracks Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistTracksRequest.Tracks">
            <summary>
            Spotify URIs of Tracks
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PlaylistTracksRequest.SnapshotId">
            <summary>
            The playlist’s snapshot ID against which you want to make the changes
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.PositionRequest">
            <summary>
            Position Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PositionRequest.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.PublicRequest">
            <summary>
            Public Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.PublicRequest.IsPublic">
            <summary>
            Is Public
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.Scope">
            <summary>
            Authorisation Scopes 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.PlaylistReadPrivate">
            <summary>
            Read access to user's private playlists.
            <para>Required For</para>
            <para>Check if Users Follow a Playlist,
            Get a List of Current User's Playlists,
            Get a List of a User's Playlists</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.PlaylistModifyPrivate">
            <summary>
            Write access to a user's private playlists. 
            <para>Required For</para>
            <para>Follow a Playlist,
            Unfollow a Playlist,
            Add Tracks to a Playlist</para>
            <para>Change a Playlist's Details,
            Create a Playlist,
            Remove Tracks from a Playlist</para>
            <para>Reorder a Playlist's Tracks,
            Replace a Playlist's Tracks,
            Upload a Custom Playlist Cover Image</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.PlaylistModifyPublic">
            <summary>
            Write access to a user's public playlists. 
            <para>Required For</para>
            <para>Follow a Playlist,
            Unfollow a Playlist,
            Add Tracks to a Playlist</para>
            <para>Change a Playlist's Details,
            Create a Playlist,
            Remove Tracks from a Playlist</para>
            <para>Reorder a Playlist's Tracks,
            Replace a Playlist's Tracks,
            Upload a Custom Playlist Cover Image</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.PlaylistReadCollaborative">
            <summary>
            Include collaborative playlists when requesting a user's playlists. 
            <para>Required For</para>
            <para>Get a List of Current User's Playlists,
            Get a List of a User's Playlists</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.ConnectModifyPlaybackState">
            <summary>
            Pause a User's Playback
            <para>Required For</para>
            <para>Seek To Position In Currently Playing Track,
            Set Repeat Mode On User’s Playback,
            Set Volume For User's Playback</para>
            <para>Skip User’s Playback To Next Track,
            Skip User’s Playback To Previous Track,
            Start/Resume a User's Playback</para>
            <para>Toggle Shuffle For User’s Playback
            Transfer a User's Playback</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.ConnectReadCurrentlyPlaying">
            <summary>
            Read access to a user’s currently playing track
            <para>Required For</para>
            <para>Get the User's Currently Playing Track</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.ConnectReadPlaybackState">
            <summary>
            Read access to a user’s player state.
            <para>Required For</para>
            <para>Get a User's Available Devices,
            Get Information About The User's Current Playback,
            Get the User's Currently Playing Track</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.ListeningTopRead">
            <summary>
            Read access to a user's top artists and tracks. 
            <para>Required For</para>
            <para>Get a User's Top Artists and Tracks</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.ListeningRecentlyPlayed">
            <summary>
            Read access to a user’s recently played tracks
            <para>Required For</para>
            <para>Get Current User's Recently Played Tracks</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.PlaybackAppRemoteControl">
            <summary>
            Remote control playback of Spotify.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.PlaybackStreaming">
            <summary>
            Control playback of a Spotify track. The user must have a Spotify Premium account. 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.UserReadBirthDate">
            <summary>
            Read access to the user's birthdate.
            <para>Required For</para>
            <para>Get Current User's Profile</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.UserReadEmail">
            <summary>
            Read access to user’s email address. 
            <para>Required For</para>
            <para>Get Current User's Profile</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.UserReadPrivate">
            <summary>
            Read access to user’s subscription details (type of user account). 
            <para>Required For</para>
            <para>Search for an Item,
            Get Current User's Profile</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.UserGeneratedContentImageUpload">
            <summary>
            User Generated Content Image Upload
            <para>Required For</para>
            <para>Upload a Custom Playlist Cover Image</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.FollowRead">
            <summary>
            Read access to the list of artists and other users that the user follows.
            <para>Required For</para>
            <para>Check if Current User Follows Artists or Users,
            Get User's Followed Artists</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.FollowModify">
            <summary>
            Write/delete access to the list of artists and other users that the user follows.
            <para>Required For</para>
            <para>Follow Artists or Users,
            Unfollow Artists or Users</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.LibraryModify">
            <summary>
            Write/delete access to a user's "Your Music" library. 
            <para>Required For</para>
            <para>Remove Albums for Current User,
            Remove User's Saved Tracks,
            Save Albums for Current User
            Save Tracks for User</para>
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.Scope.LibraryRead">
            <summary>
            Read access to a user's "Your Music" library.  
            <para>Required For</para>
            <para>Check User's Saved Albums
            Check User's Saved Tracks,
            Get Current User's Saved Albums
            Get a User's Saved Tracks</para>
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.SearchType">
            <summary>
            Search Type
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.SearchType.Album">
            <summary>
            Album
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.SearchType.Artist">
            <summary>
            Artist
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.SearchType.Playlist">
            <summary>
            Playlist
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.SearchType.Track">
            <summary>
            Track
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.TuneableTrack">
            <summary>
            Tuneable Track Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Acousticness">
            <summary>
            A confidence measure from 0.0 to 1.0 of whether the track is acoustic.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Danceability">
            <summary>
            Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Duration">
            <summary>
            The duration of the track in milliseconds.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Energy">
            <summary>
            Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Instrumentalness">
            <summary>
            Predicts whether a track contains no vocals
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Key">
            <summary>
            The key the track is in. Integers map to pitches using standard Pitch Class notation.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Liveness">
            <summary>
            Detects the presence of an audience in the recording.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Loudness">
            <summary>
            The overall loudness of a track in decibels (dB)
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Mode">
            <summary>
            Mode indicates the modality(major or minor) of a track, the type of scale from which its melodic content is derived
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Popularity">
            <summary>
            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Speechiness">
            <summary>
            Speechiness detects the presence of spoken words in a track. 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Tempo">
            <summary>
            The overall estimated tempo of a track in beats per minute (BPM). 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.TimeSignature">
            <summary>
            An estimated overall time signature of a track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.TuneableTrack.Valence">
            <summary>
            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.UriListRequest">
            <summary>
            URI List Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.UriListRequest.Uris">
            <summary>
            URIs
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Requests.UriRequest">
            <summary>
            URI Request Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Requests.UriRequest.Uri">
            <summary>
            Spotify URI
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Album">
            <summary>
            Album Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.Artists">
            <summary>
            The artists of the album. Each artist object includes a link in href to more detailed information about the artist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.Copyrights">
            <summary>
            The copyright statements of the album.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.ExternalId">
            <summary>
            Known external IDs for the album.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.Genres">
            <summary>
            A list of the genres used to classify the album. For example: "Prog Rock" , "Post-Grunge"
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.Label">
            <summary>
            The label for the album.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.Popularity">
            <summary>
            The popularity of the album. The value will be between 0 and 100, with 100 being the most popular
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.ReleaseDate">
            <summary>
            The date the album was first released, for example 1981. Depending on the precision, it might be shown as 1981-12 or 1981-12-15
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.ReleaseDatePrecision">
            <summary>
            The precision with which release_date value is known: year , month , or day.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Album.Tracks">
            <summary>
            The tracks of the album.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Artist">
            <summary>
            Artist Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Artist.Followers">
            <summary>
            Information about the followers of the artist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Artist.Genres">
            <summary>
            A list of the genres the artist is associated with. For example: "Prog Rock" , "Post-Grunge".
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Artist.Images">
            <summary>
            Images of the artist in various sizes, widest first.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Artist.Popularity">
            <summary>
            The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.AudioAnalysis">
            <summary>
            Audio Analysis Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioAnalysis.Bars">
            <summary>
            The time intervals of the bars throughout the track
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioAnalysis.Beats">
            <summary>
            The time intervals of beats throughout the track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioAnalysis.Sections">
            <summary>
            Sections are defined by large variations in rhythm or timbre, e.g.chorus, verse, bridge, guitar solo, etc.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioAnalysis.Segments">
            <summary>
            Audio segments attempts to subdivide a song into many segments, with each segment containing a roughly consitent sound throughout its duration.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioAnalysis.Tatums">
            <summary>
            A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.AudioFeatures">
            <summary>
            Audio Features Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Acousticness">
            <summary>
            A confidence measure from 0.0 to 1.0 of whether the track is acoustic.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.AnalysisUrl">
            <summary>
            An HTTP URL to access the full audio analysis of this track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Danceability">
            <summary>
            Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Duration">
            <summary>
            The duration of the track in milliseconds.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Energy">
            <summary>
            Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Instrumentalness">
            <summary>
            Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Key">
            <summary>
            The key the track is in. Integers map to pitches using standard Pitch Class notation.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Liveness">
            <summary>
            Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Loudness">
            <summary>
            The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Mode">
            <summary>
            Mode indicates the modality(major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Speechiness">
            <summary>
            Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Tempo">
            <summary>
            The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.TimeSignature">
            <summary>
            An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.TrackHref">
            <summary>
            A link to the Web API endpoint providing full details of the track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AudioFeatures.Valence">
            <summary>
            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.AvailableGenreSeeds">
            <summary>
            Available Genre Seeds Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.AvailableGenreSeeds.Genres">
            <summary>
            Genres
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.BaseResponse">
            <summary>
            Base Response Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.BaseResponse.Error">
            <summary>
            Error Object
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Category">
            <summary>
            Category Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Category.Images">
            <summary>
            The category icon, in various sizes.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Content.Id">
            <summary>
            The base-62 identifier that you can find at the end of the Spotify URI for the object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Content.Name">
            <summary>
            The name of the content
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.ContentResponse">
            <summary>
            Content Response
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ContentResponse.Albums">
            <summary>
            Paging Object of Albums
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ContentResponse.Categories">
            <summary>
            Paging Object of Category
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ContentResponse.Artists">
            <summary>
            Paging Object of Artists
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ContentResponse.Playlists">
            <summary>
            Paging Object of Playlists
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ContentResponse.Tracks">
            <summary>
            Paging Object of Tracks
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Context">
            <summary>
            Context Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Context.Type">
            <summary>
            The object type of the object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Context.Href">
            <summary>
            A link to the Web API endpoint providing full details of the object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Context.ExternalUrls">
            <summary>
            Known external URLs for this object.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Context.Uri">
            <summary>
            The Spotify URI for the object
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Copyright">
            <summary>
            Copyright Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Copyright.Text">
            <summary>
            The copyright text for this album.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Copyright.Type">
            <summary>
            The type of copyright: C = the copyright, P = the sound recording (performance) copyright.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.CurrentlyPlaying">
            <summary>
            Currently Playing Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CurrentlyPlaying.Device">
            <summary>
            The device that is currently active
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CurrentlyPlaying.RepeatState">
            <summary>
            off, track, context
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CurrentlyPlaying.SuffleState">
            <summary>
            If shuffle is on or off
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.CursorPaging`1">
            <summary>
            Cursor Paging Object
            </summary>
            <typeparam name="T">Object Type</typeparam>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.Error">
            <summary>
            Error Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.Href">
            <summary>
            A link to the Web API endpoint returning the full result of the request.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.Items">
            <summary>
            The requested data.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.Next">
            <summary>
            URL to the next page of items. (null if none)
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.Cursors">
            <summary>
            The cursors used to find the next set of items.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.Total">
            <summary>
            The total number of items available to return.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.ReadOnlyItems">
            <summary>
            IEnumerable of Type
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.CursorPaging`1.After">
            <summary>
            The cursor to use as key to find the next page of items.
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Responses.CursorPaging`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Device">
            <summary>
            Device Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Device.Id">
            <summary>
            The device ID. This may be null.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Device.IsActive">
            <summary>
            If this device is the currently active device.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Device.IsPrivateSession">
            <summary>
            If this device is currently in a private session.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Device.IsRestricted">
            <summary>
            Whether controlling this device is restricted. If true then no commands will be accepted by this device.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Device.Name">
            <summary>
            The name of the device.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Device.Type">
            <summary>
            Device type, such as “computer”, “smartphone” or “speaker”.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Device.Volume">
            <summary>
            The current volume in percent. This may be null.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Devices">
            <summary>
            Devices Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Devices.Items">
            <summary>
            A list of 0..n Device objects.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.ErrorResponse">
            <summary>
            Error Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ErrorResponse.StatusCode">
            <summary>
            The HTTP status code
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ErrorResponse.Message">
            <summary>
            A short description of the cause of the error. 
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.ExternalId">
            <summary>
            External Id Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ExternalId.Isrc">
            <summary>
            International Standard Recording Code
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ExternalId.Ean">
            <summary>
            International Article Number
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ExternalId.Upc">
            <summary>
            Universal Product Code
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.ExternalUrl">
            <summary>
            External Url Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.ExternalUrl.Spotify">
            <summary>
            An external, public URL to the object.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Followers">
            <summary>
            Followers Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Followers.Href">
            <summary>
            A link to the Web API endpoint providing full details of the followers; null if not available
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Followers.Total">
            <summary>
            The total number of followers.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Image">
            <summary>
            Image Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Image.Height">
            <summary>
            The image height in pixels. If unknown: null or not returned.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Image.Url">
            <summary>
            The source URL of the image.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Image.Width">
            <summary>
            The image width in pixels. If unknown: null or not returned.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Internal.ContentCursorResponse">
            <summary>
            Content Cursor Response
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Internal.ContentCursorResponse.Artists">
            <summary>
            Cursor Paging Object of Artist
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.LinkedTrack">
            <summary>
            Linked Track Object
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.LookupResponse">
            <summary>
            Lookup Response
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.LookupResponse.Albums">
            <summary>
            List of Album Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.LookupResponse.Artists">
            <summary>
            List of Artist Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.LookupResponse.Tracks">
            <summary>
            List of Track Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.LookupResponse.AudioFeatures">
            <summary>
            List of Audio Feature Object
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Paging`1">
            <summary>
            Paging Object
            </summary>
            <typeparam name="T">Object Type</typeparam>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Paging`1.Error">
            <summary>
            Error Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Paging`1.Href">
            <summary>
            A link to the Web API endpoint returning the full result of the request.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Paging`1.Items">
            <summary>
            The requested data.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Paging`1.Next">
            <summary>
            URL to the next page of items. (null if none)
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Paging`1.Previous">
            <summary>
            URL to the previous page of items. (null if none)
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Paging`1.ReadOnlyItems">
            <summary>
            IEnumerable of Type
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Paging`1.Page">
            <summary>
            Page
            </summary>
        </member>
        <member name="M:Spotify.NetStandard.Responses.Paging`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.PlayHistory">
            <summary>
            Play History Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PlayHistory.Track">
            <summary>
            The track the user listened to.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PlayHistory.PlayedAt">
            <summary>
            The date and time the track was played. Format yyyy-MM-ddTHH:mm:ss
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PlayHistory.Context">
            <summary>
            The context the track was played from.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Playlist">
            <summary>
            Playlist Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.Collaborative">
            <summary>
            true if the owner allows other users to modify the playlist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.Description">
            <summary>
            The playlist description. Only returned for modified, verified playlists, otherwise null.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.Followers">
            <summary>
            Information about the followers of the playlist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.Images">
            <summary>
            Images for the playlist.The array may be empty or contain up to three images. The images are returned by size in descending order.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.Owner">
            <summary>
            The user who owns the playlist
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.Public">
            <summary>
            The playlist’s public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.SnapshotId">
            <summary>
            The version identifier for the current playlist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Playlist.Tracks">
            <summary>
            Information about the tracks of the playlist.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.PlaylistTrack">
            <summary>
            Playlist Track Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PlaylistTrack.AddedAt">
            <summary>
            The date and time the track was added.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PlaylistTrack.AddedBy">
            <summary>
            The Spotify user who added the track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PlaylistTrack.IsLocal">
            <summary>
            Whether this track is a local file or not.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PlaylistTrack.Track">
            <summary>
            Information about the track.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.PrivateUser">
            <summary>
            Private User Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PrivateUser.BirthDate">
            <summary>
            The user’s date-of-birth.This field is only available when the current user has granted access to the user-read-birthdate scope.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PrivateUser.Country">
            <summary>
            The country of the user, as set in the user’s account profile.An ISO 3166-1 alpha-2 country code.This field is only available when the current user has granted access to the user-read-private scope.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PrivateUser.Email">
            <summary>
            The user’s email address, as entered by the user when creating their account. his field is only available when the current user has granted access to the user-read-email scope
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.PublicUser">
            <summary>
            Public User Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PublicUser.DisplayName">
            <summary>
            The name displayed on the user’s profile. null if not available.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PublicUser.Followers">
            <summary>
            Information about the followers of this user.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PublicUser.Images">
            <summary>
            The user’s profile image.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.PublicUser.Product">
            <summary>
            The user’s Spotify subscription level: “premium”, “free”, etc. This field is only available when the current user has granted access to the user-read-private scope.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.RecommendationSeed">
            <summary>
            Recommendation Seed Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.RecommendationSeed.AfterFilteringSize">
            <summary>
            The number of tracks available after min_* and max_* filters have been applied.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.RecommendationSeed.AfterRelinkingSize">
            <summary>
            The number of tracks available after relinking for regional availability.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.RecommendationSeed.InitialPoolSize">
            <summary>
            The number of recommended tracks available for this seed.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.RecommendationsResponse">
            <summary>
            Recommendations Response Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.RecommendationsResponse.Seeds">
            <summary>
            An array of recommendation seed objects.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.RecommendationsResponse.Tracks">
            <summary>
            An array of track object (simplified) ordered according to the parameters supplied.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.SavedAlbum">
            <summary>
            Saved Album Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SavedAlbum.AddedAt">
            <summary>
            The date and time the album was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SavedAlbum.Album">
            <summary>
            Information about the album.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.SavedTrack">
            <summary>
            Saved Track Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SavedTrack.AddedAt">
            <summary>
            The date and time the track was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SavedTrack.Track">
            <summary>
            Information about the track.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Section">
            <summary>
            Section Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.Loudness">
            <summary>
            The overall loudness of the section in decibels (dB).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.Tempo">
            <summary>
            The overall estimated tempo of the section in beats per minute (BPM).  
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.TempoConfidence">
            <summary>
            The confidence, from 0.0 to 1.0, of the reliability of the tempo.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.Key">
            <summary>
            The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.KeyConfidence">
            <summary>
            The confidence, from 0.0 to 1.0, of the reliability of the key.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.Mode">
            <summary>
            Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived.This field will contain a 0 for “minor”, a 1 for “major”, or a -1 for no result.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.ModeConfidence">
            <summary>
            The confidence, from 0.0 to 1.0, of the reliability of the mode.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.TimeSignature">
            <summary>
            An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of “3/4”, to “7/4”.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Section.TimeSignatureConfidence">
            <summary>
            The confidence, from 0.0 to 1.0, of the reliability of the time_signature.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Segment">
            <summary>
            Segment Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Segment.LoudnessStart">
            <summary>
            The onset loudness of the segment in decibels (dB).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Segment.LoudnessMax">
            <summary>
            The peak loudness of the segment in decibels (dB). 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Segment.LoudnessMaxTime">
            <summary>
            The segment-relative offset of the segment peak loudness in seconds. 
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Segment.LoudnessEnd">
            <summary>
            The offset loudness of the segment in decibels (dB).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Segment.Pitches">
            <summary>
            A “chroma” vector representing the pitch content of the segment, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Segment.Timbre">
            <summary>
            Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.SimplifiedAlbum">
            <summary>
            Simplified Album Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedAlbum.AlbumGroup">
            <summary>
            The field is present when getting an artist’s albums. Possible values are “album”, “single”, “compilation”, “appears_on”.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedAlbum.AlbumType">
            <summary>
            The type of the album: one of "album" , "single" , or "compilation".
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedAlbum.Artists">
            <summary>
            The artists of the album. Each artist object includes a link in href to more detailed information about the artist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedAlbum.AvailableMarkets">
            <summary>
            The markets in which the album is available: ISO 3166-1 alpha-2 country codes
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedAlbum.Images">
            <summary>
            The cover art for the album in various sizes, widest first.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedAlbum.TotalTracks">
            <summary>
            The total number of tracks
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.SimplifiedArtist">
            <summary>
            Simplified Artist Object
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.SimplifiedCurrentlyPlaying">
            <summary>
            Simplified Currently Playing Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedCurrentlyPlaying.Context">
            <summary>
            A Context Object. Can be null
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedCurrentlyPlaying.TimeStamp">
            <summary>
            Unix Millisecond Timestamp when data was fetched
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedCurrentlyPlaying.Progress">
            <summary>
            Progress into the currently playing track. Can be null.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedCurrentlyPlaying.IsPlaying">
            <summary>
            If something is currently playing, return true.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedCurrentlyPlaying.Track">
            <summary>
            The currently playing track. Can be null.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedCurrentlyPlaying.Type">
            <summary>
            The object type of the currently playing item. Can be one of track, episode, ad or unknown.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.SimplifiedTrack">
            <summary>
            Simplified Track Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.Artists">
            <summary>
            The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.AvailableMarkets">
            <summary>
            A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.DiscNumber">
            <summary>
            The disc number(usually 1 unless the album consists of more than one disc).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.Duration">
            <summary>
            The track length in milliseconds.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.IsExplicit">
            <summary>
            Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.IsPlayable">
            <summary>
            Part of the response when Track Relinking is applied. If true , the track is playable in the given market. Otherwise false.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.LinkedFrom">
            <summary>
            Part of the response when Track Relinking is applied and is only part of the response if the track linking, in fact, exists
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.Preview">
            <summary>
            A link to a 30 second preview(MP3 format) of the track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.SimplifiedTrack.TrackNumber">
            <summary>
            The number of the track. If an album has several discs, the track number is the number on the specified disc.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Snapshot">
            <summary>
            Snapshot Response Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Snapshot.SnapshotId">
            <summary>
            Can be used to identify playlist version in future requests
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Status">
            <summary>
            Status Response
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Status.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Status.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.TimeInterval">
            <summary>
            Time Interval Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.TimeInterval.Start">
            <summary>
            The starting point in seconds.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.TimeInterval.Duration">
            <summary>
            The duration in seconds
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.TimeInterval.Confidence">
            <summary>
            The reliability confidence, from 0.0 to 1.0
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.Track">
            <summary>
            Track Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Track.Album">
            <summary>
            The album on which the track appears.The album object includes a link in href to full information about the album.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Track.Artists">
            <summary>
            The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Track.ExternalId">
            <summary>
            Known external IDs for the track.
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Track.Restrictions">
            <summary>
            Part of the response when Track Relinking is applied, the original track is not available in the given market
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.Track.Popularity">
            <summary>
            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.
            </summary>
        </member>
        <member name="T:Spotify.NetStandard.Responses.TrackRestriction">
            <summary>
            Track Restriction Object
            </summary>
        </member>
        <member name="P:Spotify.NetStandard.Responses.TrackRestriction.Reason">
            <summary>
            Contains the reason why the track is not available e.g. market
            </summary>
        </member>
    </members>
</doc>
